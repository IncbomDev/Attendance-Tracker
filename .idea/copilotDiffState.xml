<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/_actions/server-actions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/_actions/server-actions.ts" />
              <option name="originalContent" value="&quot;use server&quot;;&#10;&#10;import {attendance, db} from &quot;@/index&quot;&#10;import { eq, desc, and } from &quot;drizzle-orm&quot;;&#10;&#10;export async function logAction(action: string, userId: string) {&#10;    await db.insert(attendance).values({&#10;        userId: userId,&#10;        action: action,&#10;        timestamp: new Date(),&#10;    });&#10;}&#10;&#10;export async function getStatus(userId: string): Promise&lt;'checked-in' | 'checked-out'&gt; {&#10;    const lastAction = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId))&#10;        .orderBy(desc(attendance.timestamp))&#10;        .limit(1);&#10;&#10;    if (lastAction.length === 0) {&#10;        return 'checked-out';&#10;    }&#10;&#10;    return lastAction[0].action === 'check-in' ? 'checked-in' : 'checked-out';&#10;}&#10;&#10;export async function getCheckedInTime(userId: string): Promise&lt;Date | null&gt; {&#10;    const lastCheckIn = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(&#10;            and(&#10;                eq(attendance.userId, userId),&#10;                eq(attendance.action, 'check-in')&#10;            )&#10;        )&#10;        .orderBy(desc(attendance.timestamp))&#10;        .limit(1);&#10;&#10;    if (lastCheckIn.length === 0) {&#10;        return null;&#10;    }&#10;&#10;    return lastCheckIn[0].timestamp;&#10;}" />
              <option name="updatedContent" value="&quot;use server&quot;;&#10;&#10;import {attendance, db} from &quot;@/index&quot;&#10;import { eq, and } from &quot;drizzle-orm&quot;;&#10;&#10;export async function logAction(action: string, userId: string) {&#10;    const today = new Date().toISOString().split('T')[0];&#10;    &#10;    // Check if there's already an attendance record for today&#10;    const existingRecord = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(and(&#10;            eq(attendance.userId, userId),&#10;            eq(attendance.date, today)&#10;        ))&#10;        .limit(1);&#10;&#10;    if (existingRecord.length &gt; 0) {&#10;        // Update existing record&#10;        const updateData: any = {&#10;            updatedAt: new Date(),&#10;        };&#10;        &#10;        if (action === 'check-in') {&#10;            updateData.checkInTime = new Date();&#10;        } else if (action === 'check-out') {&#10;            updateData.checkOutTime = new Date();&#10;        }&#10;&#10;        await db&#10;            .update(attendance)&#10;            .set(updateData)&#10;            .where(eq(attendance.id, existingRecord[0].id));&#10;    } else {&#10;        // Create new record&#10;        const recordData: any = {&#10;            userId: userId,&#10;            date: today,&#10;            status: 'present',&#10;        };&#10;        &#10;        if (action === 'check-in') {&#10;            recordData.checkInTime = new Date();&#10;        } else if (action === 'check-out') {&#10;            recordData.checkOutTime = new Date();&#10;        }&#10;&#10;        await db.insert(attendance).values(recordData);&#10;    }&#10;}&#10;&#10;export async function getStatus(userId: string): Promise&lt;'checked-in' | 'checked-out'&gt; {&#10;    const today = new Date().toISOString().split('T')[0];&#10;    &#10;    // Get today's attendance record&#10;    const todayRecord = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(and(&#10;            eq(attendance.userId, userId),&#10;            eq(attendance.date, today)&#10;        ))&#10;        .limit(1);&#10;&#10;    if (todayRecord.length === 0) {&#10;        return 'checked-out';&#10;    }&#10;&#10;    const record = todayRecord[0];&#10;    &#10;    // If user has checked in but not checked out, they're checked in&#10;    if (record.checkInTime &amp;&amp; !record.checkOutTime) {&#10;        return 'checked-in';&#10;    }&#10;    &#10;    // Otherwise they're checked out&#10;    return 'checked-out';&#10;}&#10;&#10;export async function getCheckedInTime(userId: string): Promise&lt;Date | null&gt; {&#10;    const today = new Date().toISOString().split('T')[0];&#10;    &#10;    // Get today's attendance record&#10;    const todayRecord = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(and(&#10;            eq(attendance.userId, userId),&#10;            eq(attendance.date, today)&#10;        ))&#10;        .limit(1);&#10;&#10;    if (todayRecord.length === 0 || !todayRecord[0].checkInTime) {&#10;        return null;&#10;    }&#10;&#10;    return todayRecord[0].checkInTime;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/_components/attendance-status.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/_components/attendance-status.tsx" />
              <option name="originalContent" value="import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { Clock } from 'lucide-react'&#10;import { TimeDisplay } from './time-display'&#10;&#10;interface AttendanceStatusProps {&#10;    isCheckedIn: boolean&#10;    checkInTime: string | null&#10;    checkOutTime: string | null&#10;    onCheckInOut: (status: string) =&gt; void&#10;}&#10;&#10;export function AttendanceStatus({&#10;     isCheckedIn,&#10;     checkInTime,&#10;     checkOutTime,&#10;     onCheckInOut&#10; }: AttendanceStatusProps) {&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardContent className=&quot;pt-6&quot;&gt;&#10;                &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;mx-auto w-20 h-20 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                        &lt;Clock className=&quot;w-10 h-10 text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-800&quot;&gt;&#10;                            {isCheckedIn ? 'Checked In' : 'Not Checked In'}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600&quot;&gt;&#10;                            {isCheckedIn ? 'You are currently in session' : 'Ready to start your session?'}&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;TimeDisplay checkInTime={checkInTime} checkOutTime={checkOutTime} /&gt;&#10;&#10;                    &lt;Button&#10;                        onClick={() =&gt; onCheckInOut(isCheckedIn ? 'check-out' : 'check-in')}&#10;                        className={`w-full text-lg py-6 ${&#10;                            isCheckedIn&#10;                                ? 'bg-red-500 hover:bg-red-600 text-white'&#10;                                : 'bg-green-500 hover:bg-green-600 text-white'&#10;                        }`}&#10;                    &gt;&#10;                        {isCheckedIn ? 'Check Out' : 'Check In'}&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { Clock } from 'lucide-react'&#10;import { TimeDisplay } from './time-display'&#10;&#10;interface AttendanceStatusProps {&#10;    isCheckedIn: boolean&#10;    checkInTime: string | null&#10;    checkOutTime: string | null&#10;    onCheckInOut: (status: string) =&gt; void&#10;    loading?: boolean&#10;}&#10;&#10;export function AttendanceStatus({&#10;     isCheckedIn,&#10;     checkInTime,&#10;     checkOutTime,&#10;     onCheckInOut,&#10;     loading = false&#10; }: AttendanceStatusProps) {&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardContent className=&quot;pt-6&quot;&gt;&#10;                &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;mx-auto w-20 h-20 bg-gradient-to-br from-green-400 to-blue-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                        &lt;Clock className=&quot;w-10 h-10 text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;h2 className=&quot;text-2xl font-bold text-gray-800&quot;&gt;&#10;                            {isCheckedIn ? 'Checked In' : 'Not Checked In'}&#10;                        &lt;/h2&gt;&#10;                        &lt;p className=&quot;text-gray-600&quot;&gt;&#10;                            {isCheckedIn ? 'You are currently in session' : 'Ready to start your session?'}&#10;                        &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;TimeDisplay checkInTime={checkInTime} checkOutTime={checkOutTime} /&gt;&#10;&#10;                    &lt;Button&#10;                        onClick={() =&gt; onCheckInOut(isCheckedIn ? 'check-out' : 'check-in')}&#10;                        disabled={loading}&#10;                        className={`w-full text-lg py-6 ${&#10;                            isCheckedIn&#10;                                ? 'bg-red-500 hover:bg-red-600 text-white'&#10;                                : 'bg-green-500 hover:bg-green-600 text-white'&#10;                        }`}&#10;                    &gt;&#10;                        {loading&#10;                            ? (isCheckedIn ? 'Checking Out...' : 'Checking In...')&#10;                            : (isCheckedIn ? 'Check Out' : 'Check In')}&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/_components/attendance-tracker.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/_components/attendance-tracker.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { LoginForm } from './login'&#10;import { AttendanceStatus } from './attendance-status'&#10;import { StatusIndicator } from './status-indicator'&#10;import { getCurrentDate } from '@/lib/date-helper'&#10;import {UserHeader} from &quot;./user-header&quot;;&#10;import {ViewAdminDashboard} from &quot;@/app/_components/view-admin-dashboard&quot;;&#10;import {logAction} from &quot;@/app/_actions/server-actions&quot;;&#10;&#10;export default function AttendanceTracker({ session, isCheckedIn, checkInTime }: { session?: any, isCheckedIn: boolean, checkInTime?: Date }) {&#10;    if (!session) {&#10;        return &lt;LoginForm /&gt;&#10;    }&#10;&#10;    const formatTime = (date: Date) =&gt; {&#10;        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });&#10;    }&#10;&#10;    const checkInOutHandler = async (status: string) =&gt; {&#10;        await logAction(status, session.user.id)&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4&quot;&gt;&#10;            &lt;div className=&quot;max-w-md mx-auto space-y-6&quot;&gt;&#10;                &lt;UserHeader&#10;                    userName={session.user.name}&#10;                    currentDate={getCurrentDate()}&#10;                /&gt;&#10;&#10;                &lt;AttendanceStatus&#10;                    isCheckedIn={isCheckedIn}&#10;                    checkInTime={checkInTime ? formatTime(checkInTime) : null}&#10;                    checkOutTime={!isCheckedIn &amp;&amp; checkInTime ? formatTime(new Date()) : null}&#10;                    onCheckInOut={checkInOutHandler}&#10;                /&gt;&#10;&#10;                &lt;StatusIndicator isCheckedIn={isCheckedIn} /&gt;&#10;&#10;                &lt;ViewAdminDashboard hasAccess={session.user.role === 'admin'} /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { LoginForm } from './login'&#10;import { AttendanceStatus } from './attendance-status'&#10;import { StatusIndicator } from './status-indicator'&#10;import { getCurrentDate } from '@/lib/date-helper'&#10;import {UserHeader} from &quot;./user-header&quot;;&#10;import {ViewAdminDashboard} from &quot;@/app/_components/view-admin-dashboard&quot;;&#10;import {logAction} from &quot;@/app/_actions/server-actions&quot;;&#10;&#10;export default function AttendanceTracker({ session, isCheckedIn: initialCheckedIn, checkInTime: initialCheckInTime }: { session?: any, isCheckedIn: boolean, checkInTime?: Date }) {&#10;    if (!session) {&#10;        return &lt;LoginForm /&gt;&#10;    }&#10;&#10;    const [isCheckedIn, setIsCheckedIn] = useState(initialCheckedIn)&#10;    const [checkInTime, setCheckInTime] = useState&lt;Date | undefined&gt;(initialCheckInTime)&#10;    const [checkOutTime, setCheckOutTime] = useState&lt;string | null&gt;(null)&#10;    const [loading, setLoading] = useState(false)&#10;&#10;    const formatTime = (date: Date) =&gt; {&#10;        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });&#10;    }&#10;&#10;    const checkInOutHandler = async (status: string) =&gt; {&#10;        setLoading(true)&#10;        await logAction(status, session.user.id)&#10;        if (status === 'check-in') {&#10;            setIsCheckedIn(true)&#10;            setCheckInTime(new Date())&#10;            setCheckOutTime(null)&#10;        } else {&#10;            setIsCheckedIn(false)&#10;            setCheckOutTime(formatTime(new Date()))&#10;            setCheckInTime(undefined)&#10;        }&#10;        setLoading(false)&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4&quot;&gt;&#10;            &lt;div className=&quot;max-w-md mx-auto space-y-6&quot;&gt;&#10;                &lt;UserHeader&#10;                    userName={session.user.name}&#10;                    currentDate={getCurrentDate()}&#10;                /&gt;&#10;&#10;                &lt;AttendanceStatus&#10;                    isCheckedIn={isCheckedIn}&#10;                    checkInTime={checkInTime ? formatTime(checkInTime) : null}&#10;                    checkOutTime={checkOutTime}&#10;                    onCheckInOut={checkInOutHandler}&#10;                    loading={loading}&#10;                /&gt;&#10;&#10;                &lt;StatusIndicator isCheckedIn={isCheckedIn} /&gt;&#10;&#10;                &lt;ViewAdminDashboard hasAccess={session.user.role === 'admin'} /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/dashboard/_actions/server-actions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/dashboard/_actions/server-actions.ts" />
              <option name="originalContent" value="&quot;use server&quot;;&#10;&#10;import {db, attendance, user} from &quot;@/index&quot;;&#10;import {desc, eq} from &quot;drizzle-orm&quot;;&#10;import {UserDetail} from &quot;@/app/admin/dashboard/_components/user-detail/types&quot;;&#10;&#10;export async function calculateHours(userId: string): Promise&lt;number&gt; {&#10;    const records = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId));&#10;&#10;    let totalMilliseconds = 0;&#10;&#10;    for (const record of records) {&#10;        if (record.checkInTime &amp;&amp; record.checkOutTime) {&#10;            totalMilliseconds += record.checkOutTime.getTime() - record.checkInTime.getTime();&#10;        }&#10;    }&#10;&#10;    return totalMilliseconds / (1000 * 60 * 60);&#10;}&#10;&#10;export async function getUserDetail(userId: string): Promise&lt;UserDetail&gt; {&#10;    const dbUser = await db&#10;        .select()&#10;        .from(user)&#10;        .where(eq(user.id, userId))&#10;        .execute();&#10;&#10;    if (dbUser.length === 0) {&#10;        throw new Error(&quot;User not found&quot;);&#10;    }&#10;&#10;    const hoursInShop = await calculateHours(userId);&#10;    const attendanceRecordsRaw = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId))&#10;        .orderBy(desc(attendance.date))&#10;        .execute();&#10;&#10;    const attendanceRecords = attendanceRecordsRaw.map(record =&gt; ({&#10;        id: record.id,&#10;        date: record.date,&#10;        checkInTime: record.checkInTime&#10;            ? record.checkInTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })&#10;            : null,&#10;        checkOutTime: record.checkOutTime&#10;            ? record.checkOutTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })&#10;            : null&#10;    }));&#10;&#10;    return {&#10;        id: dbUser[0].id,&#10;        userName: dbUser[0].name,&#10;        email: dbUser[0].email,&#10;        hoursInShop,&#10;        attendanceRecords,&#10;    };&#10;}&#10;&#10;// CRUD operations for attendance editing&#10;export async function updateAttendanceRecord(&#10;    recordId: number,&#10;    data: {&#10;        date: string;&#10;        checkInTime?: Date | null;&#10;        checkOutTime?: Date | null;&#10;        status: string;&#10;    }&#10;) {&#10;    console.log('updateAttendanceRecord called with:', { recordId, data });&#10;    try {&#10;        const result = await db&#10;            .update(attendance)&#10;            .set({&#10;                date: data.date,&#10;                checkInTime: data.checkInTime,&#10;                checkOutTime: data.checkOutTime,&#10;                status: data.status,&#10;                updatedAt: new Date(),&#10;            })&#10;            .where(eq(attendance.id, recordId));&#10;&#10;        console.log('Update result:', result);&#10;        return { success: true };&#10;    } catch (error) {&#10;        console.error('Error updating attendance record:', error);&#10;        return { success: false, error: 'Failed to update attendance record' };&#10;    }&#10;}&#10;&#10;export async function createAttendanceRecord(data: {&#10;    userId: string;&#10;    date: string;&#10;    checkInTime?: Date | null;&#10;    checkOutTime?: Date | null;&#10;    status: string;&#10;}) {&#10;    console.log('createAttendanceRecord called with:', data);&#10;    try {&#10;        const result = await db&#10;            .insert(attendance)&#10;            .values({&#10;                userId: data.userId,&#10;                date: data.date,&#10;                checkInTime: data.checkInTime,&#10;                checkOutTime: data.checkOutTime,&#10;                status: data.status,&#10;            })&#10;            .returning();&#10;&#10;        console.log('Create result:', result);&#10;        return { success: true, record: result[0] };&#10;    } catch (error) {&#10;        console.error('Error creating attendance record:', error);&#10;        return { success: false, error: 'Failed to create attendance record' };&#10;    }&#10;}&#10;&#10;export async function deleteAttendanceRecord(recordId: number) {&#10;    console.log('deleteAttendanceRecord called with recordId:', recordId);&#10;    try {&#10;        const result = await db&#10;            .delete(attendance)&#10;            .where(eq(attendance.id, recordId));&#10;&#10;        console.log('Delete result:', result);&#10;        return { success: true };&#10;    } catch (error) {&#10;        console.error('Error deleting attendance record:', error);&#10;        return { success: false, error: 'Failed to delete attendance record' };&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use server&quot;;&#10;&#10;import {db, attendance, user} from &quot;@/index&quot;;&#10;import {desc, eq} from &quot;drizzle-orm&quot;;&#10;import {UserDetail} from &quot;@/app/admin/dashboard/_components/user-detail/types&quot;;&#10;&#10;export async function calculateHours(userId: string): Promise&lt;number&gt; {&#10;    const records = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId));&#10;&#10;    let totalMilliseconds = 0;&#10;&#10;    for (const record of records) {&#10;        if (record.checkInTime &amp;&amp; record.checkOutTime) {&#10;            totalMilliseconds += record.checkOutTime.getTime() - record.checkInTime.getTime();&#10;        }&#10;    }&#10;&#10;    return totalMilliseconds / (1000 * 60 * 60);&#10;}&#10;&#10;export async function getUserDetail(userId: string): Promise&lt;UserDetail&gt; {&#10;    const dbUser = await db&#10;        .select()&#10;        .from(user)&#10;        .where(eq(user.id, userId))&#10;        .execute();&#10;&#10;    if (dbUser.length === 0) {&#10;        throw new Error(&quot;User not found&quot;);&#10;    }&#10;&#10;    const hoursInShop = await calculateHours(userId);&#10;    const attendanceRecordsRaw = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId))&#10;        .orderBy(desc(attendance.date))&#10;        .execute();&#10;&#10;    const attendanceRecords = attendanceRecordsRaw.map(record =&gt; ({&#10;        id: record.id,&#10;        date: record.date,&#10;        checkInTime: record.checkInTime&#10;            ? record.checkInTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })&#10;            : null,&#10;        checkOutTime: record.checkOutTime&#10;            ? record.checkOutTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })&#10;            : null&#10;    }));&#10;&#10;    return {&#10;        id: dbUser[0].id,&#10;        userName: dbUser[0].name,&#10;        email: dbUser[0].email,&#10;        role: dbUser[0].role,&#10;        hoursInShop,&#10;        attendanceRecords,&#10;    };&#10;}&#10;&#10;// CRUD operations for attendance editing&#10;export async function updateAttendanceRecord(&#10;    recordId: number,&#10;    data: {&#10;        date: string;&#10;        checkInTime?: Date | null;&#10;        checkOutTime?: Date | null;&#10;        status: string;&#10;    }&#10;) {&#10;    console.log('updateAttendanceRecord called with:', { recordId, data });&#10;    try {&#10;        const result = await db&#10;            .update(attendance)&#10;            .set({&#10;                date: data.date,&#10;                checkInTime: data.checkInTime,&#10;                checkOutTime: data.checkOutTime,&#10;                status: data.status,&#10;                updatedAt: new Date(),&#10;            })&#10;            .where(eq(attendance.id, recordId));&#10;&#10;        console.log('Update result:', result);&#10;        return { success: true };&#10;    } catch (error) {&#10;        console.error('Error updating attendance record:', error);&#10;        return { success: false, error: 'Failed to update attendance record' };&#10;    }&#10;}&#10;&#10;export async function createAttendanceRecord(data: {&#10;    userId: string;&#10;    date: string;&#10;    checkInTime?: Date | null;&#10;    checkOutTime?: Date | null;&#10;    status: string;&#10;}) {&#10;    console.log('createAttendanceRecord called with:', data);&#10;    try {&#10;        const result = await db&#10;            .insert(attendance)&#10;            .values({&#10;                userId: data.userId,&#10;                date: data.date,&#10;                checkInTime: data.checkInTime,&#10;                checkOutTime: data.checkOutTime,&#10;                status: data.status,&#10;            })&#10;            .returning();&#10;&#10;        console.log('Create result:', result);&#10;        return { success: true, record: result[0] };&#10;    } catch (error) {&#10;        console.error('Error creating attendance record:', error);&#10;        return { success: false, error: 'Failed to create attendance record' };&#10;    }&#10;}&#10;&#10;export async function deleteAttendanceRecord(recordId: number) {&#10;    console.log('deleteAttendanceRecord called with recordId:', recordId);&#10;    try {&#10;        const result = await db&#10;            .delete(attendance)&#10;            .where(eq(attendance.id, recordId));&#10;&#10;        console.log('Delete result:', result);&#10;        return { success: true };&#10;    } catch (error) {&#10;        console.error('Error deleting attendance record:', error);&#10;        return { success: false, error: 'Failed to delete attendance record' };&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/editable-attendance-record.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/editable-attendance-record.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { CheckCircle, XCircle, Save, X, Trash2, Edit } from &quot;lucide-react&quot;;&#10;import { formatDate, getAttendanceStatus } from './utils';&#10;import { updateAttendanceRecord, deleteAttendanceRecord, createAttendanceRecord } from '../../_actions/server-actions';&#10;import type { AttendanceRecord as AttendanceRecordType } from './types';&#10;&#10;interface EditableAttendanceRecordProps {&#10;    record: AttendanceRecordType &amp; { id?: number };&#10;    userId: string;&#10;    onUpdateAction: (updatedRecord: AttendanceRecordType) =&gt; void;&#10;    onDeleteAction: (recordId: number) =&gt; void;&#10;    isEditMode: boolean;&#10;}&#10;&#10;export function EditableAttendanceRecord({&#10;    record,&#10;    userId,&#10;    onUpdateAction,&#10;    onDeleteAction,&#10;    isEditMode&#10;}: EditableAttendanceRecordProps) {&#10;    const [isEditing, setIsEditing] = useState(false);&#10;    const [editData, setEditData] = useState({&#10;        date: record.date,&#10;        checkInTime: record.checkInTime || '',&#10;        checkOutTime: record.checkOutTime || '',&#10;        status: getAttendanceStatus(record.checkInTime, record.checkOutTime) === 'complete' ? 'present' : 'absent'&#10;    });&#10;    const [isLoading, setIsLoading] = useState(false);&#10;&#10;    const status = getAttendanceStatus(record.checkInTime, record.checkOutTime);&#10;&#10;    const handleSave = async () =&gt; {&#10;        console.log('handleSave called for record:', record);&#10;        setIsLoading(true);&#10;        try {&#10;            // Handle check-in time&#10;            if (editData.checkInTime) {&#10;                if (record.checkInId) {&#10;                    // Update existing check-in record&#10;                    const checkInTimestamp = new Date(`${editData.date}T${editData.checkInTime}:00`);&#10;                    console.log('About to update check-in record:', record.checkInId);&#10;&#10;                    const result = await updateAttendanceRecord(record.checkInId, {&#10;                        action: 'check-in',&#10;                        timestamp: checkInTimestamp,&#10;                        status: editData.status&#10;                    });&#10;&#10;                    console.log('Check-in update result:', result);&#10;                    if (!result.success) {&#10;                        alert('Failed to save check-in time: ' + result.error);&#10;                        return;&#10;                    }&#10;                } else {&#10;                    // Create new check-in record&#10;                    console.log('Creating new check-in record');&#10;                    const checkInTimestamp = new Date(`${editData.date}T${editData.checkInTime}:00`);&#10;                    const result = await createAttendanceRecord({&#10;                        userId: userId,&#10;                        action: 'check-in',&#10;                        timestamp: checkInTimestamp,&#10;                        status: editData.status&#10;                    });&#10;&#10;                    console.log('Check-in create result:', result);&#10;                    if (!result.success) {&#10;                        alert('Failed to create check-in time: ' + result.error);&#10;                        return;&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Handle check-out time&#10;            if (editData.checkOutTime) {&#10;                if (record.checkOutId) {&#10;                    // Update existing check-out record&#10;                    const checkOutTimestamp = new Date(`${editData.date}T${editData.checkOutTime}:00`);&#10;                    console.log('About to update check-out record:', record.checkOutId);&#10;&#10;                    const result = await updateAttendanceRecord(record.checkOutId, {&#10;                        action: 'check-out',&#10;                        timestamp: checkOutTimestamp,&#10;                        status: editData.status&#10;                    });&#10;&#10;                    console.log('Check-out update result:', result);&#10;                    if (!result.success) {&#10;                        alert('Failed to save check-out time: ' + result.error);&#10;                        return;&#10;                    }&#10;                } else {&#10;                    // Create new check-out record&#10;                    console.log('Creating new check-out record');&#10;                    const checkOutTimestamp = new Date(`${editData.date}T${editData.checkOutTime}:00`);&#10;                    const result = await createAttendanceRecord({&#10;                        userId: userId,&#10;                        action: 'check-out',&#10;                        timestamp: checkOutTimestamp,&#10;                        status: editData.status&#10;                    });&#10;&#10;                    console.log('Check-out create result:', result);&#10;                    if (!result.success) {&#10;                        alert('Failed to create check-out time: ' + result.error);&#10;                        return;&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Update the local state with the exact values entered&#10;            onUpdateAction({&#10;                ...record,&#10;                date: editData.date,&#10;                checkInTime: editData.checkInTime || null,&#10;                checkOutTime: editData.checkOutTime || null&#10;            });&#10;&#10;            setIsEditing(false);&#10;        } catch (error) {&#10;            console.error('Error saving attendance record:', error);&#10;            alert('Failed to save attendance record. Please try again.');&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const handleDelete = async () =&gt; {&#10;        if (!confirm('Are you sure you want to delete this attendance record?')) return;&#10;&#10;        console.log('handleDelete called for record:', record);&#10;        setIsLoading(true);&#10;        try {&#10;            // Delete check-in record if exists&#10;            if (record.checkInId) {&#10;                console.log('Deleting check-in record:', record.checkInId);&#10;                const result = await deleteAttendanceRecord(record.checkInId);&#10;                console.log('Check-in delete result:', result);&#10;&#10;                if (!result.success) {&#10;                    alert('Failed to delete check-in record: ' + result.error);&#10;                    return;&#10;                }&#10;            }&#10;&#10;            // Delete check-out record if exists&#10;            if (record.checkOutId) {&#10;                console.log('Deleting check-out record:', record.checkOutId);&#10;                const result = await deleteAttendanceRecord(record.checkOutId);&#10;                console.log('Check-out delete result:', result);&#10;&#10;                if (!result.success) {&#10;                    alert('Failed to delete check-out record: ' + result.error);&#10;                    return;&#10;                }&#10;            }&#10;&#10;            // Remove from UI&#10;            onDeleteAction(record.id || record.checkInId || record.checkOutId || 0);&#10;        } catch (error) {&#10;            console.error('Error deleting attendance record:', error);&#10;            alert('Failed to delete record. Please try again.');&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const handleCancel = () =&gt; {&#10;        setEditData({&#10;            date: record.date,&#10;            checkInTime: record.checkInTime || '',&#10;            checkOutTime: record.checkOutTime || '',&#10;            status: getAttendanceStatus(record.checkInTime, record.checkOutTime) === 'complete' ? 'present' : 'absent'&#10;        });&#10;        setIsEditing(false);&#10;    };&#10;&#10;    const getStatusBadge = (status: string) =&gt; {&#10;        switch (status) {&#10;            case 'complete':&#10;                return &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800 border-green-200&quot;&gt;Complete&lt;/Badge&gt;;&#10;            case 'absent':&#10;                return &lt;Badge variant=&quot;destructive&quot; className=&quot;bg-red-100 text-red-800 border-red-200&quot;&gt;Absent&lt;/Badge&gt;;&#10;            default:&#10;                return &lt;Badge variant=&quot;outline&quot;&gt;Unknown&lt;/Badge&gt;;&#10;        }&#10;    };&#10;&#10;    const getStatusIcon = (status: string) =&gt; {&#10;        switch (status) {&#10;            case 'complete':&#10;                return &lt;CheckCircle className=&quot;h-4 w-4 text-green-600&quot; /&gt;;&#10;            case 'absent':&#10;                return &lt;XCircle className=&quot;h-4 w-4 text-red-600&quot; /&gt;;&#10;            default:&#10;                return null;&#10;        }&#10;    };&#10;&#10;    if (isEditMode &amp;&amp; isEditing) {&#10;        return (&#10;            &lt;div className=&quot;ml-7 p-3 bg-blue-50 border border-blue-200 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-3&quot;&gt;&#10;                        &lt;div&gt;&#10;                            &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Date&lt;/label&gt;&#10;                            &lt;Input&#10;                                type=&quot;date&quot;&#10;                                value={editData.date}&#10;                                onChange={(e) =&gt; setEditData({ ...editData, date: e.target.value })}&#10;                                className=&quot;mt-1&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                            &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check In&lt;/label&gt;&#10;                            &lt;Input&#10;                                type=&quot;time&quot;&#10;                                value={editData.checkInTime}&#10;                                onChange={(e) =&gt; setEditData({ ...editData, checkInTime: e.target.value })}&#10;                                className=&quot;mt-1&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                            &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check Out&lt;/label&gt;&#10;                            &lt;Input&#10;                                type=&quot;time&quot;&#10;                                value={editData.checkOutTime}&#10;                                onChange={(e) =&gt; setEditData({ ...editData, checkOutTime: e.target.value })}&#10;                                className=&quot;mt-1&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Status&lt;/label&gt;&#10;                        &lt;Select value={editData.status} onValueChange={(value) =&gt; setEditData({ ...editData, status: value })}&gt;&#10;                            &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                                &lt;SelectValue /&gt;&#10;                            &lt;/SelectTrigger&gt;&#10;                            &lt;SelectContent&gt;&#10;                                &lt;SelectItem value=&quot;present&quot;&gt;Present&lt;/SelectItem&gt;&#10;                                &lt;SelectItem value=&quot;absent&quot;&gt;Absent&lt;/SelectItem&gt;&#10;                            &lt;/SelectContent&gt;&#10;                        &lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex gap-2 pt-2&quot;&gt;&#10;                        &lt;Button&#10;                            onClick={handleSave}&#10;                            size=&quot;sm&quot;&#10;                            disabled={isLoading}&#10;                            className=&quot;bg-green-600 hover:bg-green-700&quot;&#10;                        &gt;&#10;                            &lt;Save className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                            Save&#10;                        &lt;/Button&gt;&#10;                        &lt;Button onClick={handleCancel} variant=&quot;outline&quot; size=&quot;sm&quot; disabled={isLoading}&gt;&#10;                            &lt;X className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                            Exit&#10;                        &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;ml-7 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {getStatusIcon(status)}&#10;                    &lt;span className=&quot;font-medium text-gray-900 text-sm&quot;&gt;&#10;                        {formatDate(record.date)}&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {getStatusBadge(status)}&#10;                    {isEditMode &amp;&amp; (&#10;                        &lt;div className=&quot;flex gap-1&quot;&gt;&#10;                            &lt;Button&#10;                                onClick={() =&gt; setIsEditing(true)}&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                className=&quot;h-7 w-7 p-0&quot;&#10;                            &gt;&#10;                                &lt;Edit className=&quot;h-3 w-3&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                                onClick={handleDelete}&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                className=&quot;h-7 w-7 p-0 text-red-600 hover:text-red-700 hover:bg-red-50&quot;&#10;                                disabled={isLoading}&#10;                            &gt;&#10;                                &lt;Trash2 className=&quot;h-3 w-3&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4 ml-6&quot;&gt;&#10;                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check In&lt;/p&gt;&#10;                    &lt;p className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                        {record.checkInTime || '--:--'}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check Out&lt;/p&gt;&#10;                    &lt;p className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                        {record.checkOutTime || '--:--'}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Input } from &quot;@/components/ui/input&quot;;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;;&#10;import { CheckCircle, XCircle, Save, X, Trash2, Edit } from &quot;lucide-react&quot;;&#10;import { formatDate, getAttendanceStatus } from './utils';&#10;import { updateAttendanceRecord, deleteAttendanceRecord } from '../../_actions/server-actions';&#10;import type { AttendanceRecord as AttendanceRecordType } from './types';&#10;&#10;interface EditableAttendanceRecordProps {&#10;    record: AttendanceRecordType;&#10;    userId: string;&#10;    onUpdateAction: (updatedRecord: AttendanceRecordType) =&gt; void;&#10;    onDeleteAction: (recordId: number) =&gt; void;&#10;    isEditMode: boolean;&#10;}&#10;&#10;export function EditableAttendanceRecord({&#10;    record,&#10;    userId,&#10;    onUpdateAction,&#10;    onDeleteAction,&#10;    isEditMode&#10;}: EditableAttendanceRecordProps) {&#10;    // Helper function to convert 12-hour time to 24-hour format for input fields&#10;    const convertTo24Hour = (time12h: string): string =&gt; {&#10;        if (!time12h) return '';&#10;&#10;        // If it's already in 24-hour format (no AM/PM), return as is&#10;        if (!time12h.includes('AM') &amp;&amp; !time12h.includes('PM')) {&#10;            return time12h;&#10;        }&#10;&#10;        const [time, modifier] = time12h.split(' ');&#10;        let [hours, minutes] = time.split(':');&#10;&#10;        if (hours === '12') {&#10;            hours = '00';&#10;        }&#10;        if (modifier === 'PM') {&#10;            hours = (parseInt(hours, 10) + 12).toString();&#10;        }&#10;&#10;        return `${hours.padStart(2, '0')}:${minutes}`;&#10;    };&#10;&#10;    // Helper function to convert 24-hour time to 12-hour format for display&#10;    const convertTo12Hour = (time24h: string): string =&gt; {&#10;        if (!time24h) return '';&#10;&#10;        const [hours, minutes] = time24h.split(':');&#10;        const hour = parseInt(hours, 10);&#10;        const ampm = hour &gt;= 12 ? 'PM' : 'AM';&#10;        const displayHour = hour % 12 || 12;&#10;&#10;        return `${displayHour}:${minutes} ${ampm}`;&#10;    };&#10;&#10;    const [isEditing, setIsEditing] = useState(false);&#10;    const [editData, setEditData] = useState({&#10;        date: record.date,&#10;        checkInTime: convertTo24Hour(record.checkInTime || ''),&#10;        checkOutTime: convertTo24Hour(record.checkOutTime || ''),&#10;        status: getAttendanceStatus(record.checkInTime, record.checkOutTime) === 'complete' ? 'present' : 'absent'&#10;    });&#10;    const [isLoading, setIsLoading] = useState(false);&#10;&#10;    const status = getAttendanceStatus(record.checkInTime, record.checkOutTime);&#10;&#10;    const handleSave = async () =&gt; {&#10;        console.log('handleSave called for record:', record);&#10;        setIsLoading(true);&#10;        try {&#10;            // Convert times to Date objects for database storage&#10;            const checkInTime = editData.checkInTime &#10;                ? new Date(`${editData.date}T${editData.checkInTime}:00`)&#10;                : null;&#10;            const checkOutTime = editData.checkOutTime &#10;                ? new Date(`${editData.date}T${editData.checkOutTime}:00`)&#10;                : null;&#10;&#10;            const result = await updateAttendanceRecord(record.id, {&#10;                date: editData.date,&#10;                checkInTime,&#10;                checkOutTime,&#10;                status: editData.status&#10;            });&#10;&#10;            console.log('Update result:', result);&#10;            if (!result.success) {&#10;                alert('Failed to save: ' + result.error);&#10;                return;&#10;            }&#10;&#10;            // Update the local state with converted times for proper display&#10;            onUpdateAction({&#10;                id: record.id,&#10;                date: editData.date,&#10;                checkInTime: editData.checkInTime ? convertTo12Hour(editData.checkInTime) : null,&#10;                checkOutTime: editData.checkOutTime ? convertTo12Hour(editData.checkOutTime) : null&#10;            });&#10;&#10;            setIsEditing(false);&#10;        } catch (error) {&#10;            console.error('Error saving attendance record:', error);&#10;            alert('Failed to save attendance record. Please try again.');&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const handleDelete = async () =&gt; {&#10;        if (!confirm('Are you sure you want to delete this attendance record?')) return;&#10;&#10;        console.log('handleDelete called for record:', record.id);&#10;        setIsLoading(true);&#10;        try {&#10;            const result = await deleteAttendanceRecord(record.id);&#10;            console.log('Delete result:', result);&#10;&#10;            if (result.success) {&#10;                onDeleteAction(record.id);&#10;            } else {&#10;                alert('Failed to delete record: ' + result.error);&#10;            }&#10;        } catch (error) {&#10;            console.error('Error deleting attendance record:', error);&#10;            alert('Failed to delete record. Please try again.');&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    };&#10;&#10;    const handleCancel = () =&gt; {&#10;        setEditData({&#10;            date: record.date,&#10;            checkInTime: convertTo24Hour(record.checkInTime || ''),&#10;            checkOutTime: convertTo24Hour(record.checkOutTime || ''),&#10;            status: getAttendanceStatus(record.checkInTime, record.checkOutTime) === 'complete' ? 'present' : 'absent'&#10;        });&#10;        setIsEditing(false);&#10;    };&#10;&#10;    const getStatusBadge = (status: string) =&gt; {&#10;        switch (status) {&#10;            case 'complete':&#10;                return &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800 border-green-200&quot;&gt;Complete&lt;/Badge&gt;;&#10;            case 'absent':&#10;                return &lt;Badge variant=&quot;destructive&quot; className=&quot;bg-red-100 text-red-800 border-red-200&quot;&gt;Absent&lt;/Badge&gt;;&#10;            default:&#10;                return &lt;Badge variant=&quot;outline&quot;&gt;Unknown&lt;/Badge&gt;;&#10;        }&#10;    };&#10;&#10;    const getStatusIcon = (status: string) =&gt; {&#10;        switch (status) {&#10;            case 'complete':&#10;                return &lt;CheckCircle className=&quot;h-4 w-4 text-green-600&quot; /&gt;;&#10;            case 'absent':&#10;                return &lt;XCircle className=&quot;h-4 w-4 text-red-600&quot; /&gt;;&#10;            default:&#10;                return null;&#10;        }&#10;    };&#10;&#10;    if (isEditMode &amp;&amp; isEditing) {&#10;        return (&#10;            &lt;div className=&quot;ml-7 p-3 bg-blue-50 border border-blue-200 rounded-lg&quot;&gt;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-3&quot;&gt;&#10;                        &lt;div&gt;&#10;                            &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Date&lt;/label&gt;&#10;                            &lt;Input&#10;                                type=&quot;date&quot;&#10;                                value={editData.date}&#10;                                onChange={(e) =&gt; setEditData({ ...editData, date: e.target.value })}&#10;                                className=&quot;mt-1&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                            &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check In&lt;/label&gt;&#10;                            &lt;Input&#10;                                type=&quot;time&quot;&#10;                                value={editData.checkInTime}&#10;                                onChange={(e) =&gt; setEditData({ ...editData, checkInTime: e.target.value })}&#10;                                className=&quot;mt-1&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div&gt;&#10;                            &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check Out&lt;/label&gt;&#10;                            &lt;Input&#10;                                type=&quot;time&quot;&#10;                                value={editData.checkOutTime}&#10;                                onChange={(e) =&gt; setEditData({ ...editData, checkOutTime: e.target.value })}&#10;                                className=&quot;mt-1&quot;&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Status&lt;/label&gt;&#10;                        &lt;Select value={editData.status} onValueChange={(value) =&gt; setEditData({ ...editData, status: value })}&gt;&#10;                            &lt;SelectTrigger className=&quot;mt-1&quot;&gt;&#10;                                &lt;SelectValue /&gt;&#10;                            &lt;/SelectTrigger&gt;&#10;                            &lt;SelectContent&gt;&#10;                                &lt;SelectItem value=&quot;present&quot;&gt;Present&lt;/SelectItem&gt;&#10;                                &lt;SelectItem value=&quot;absent&quot;&gt;Absent&lt;/SelectItem&gt;&#10;                            &lt;/SelectContent&gt;&#10;                        &lt;/Select&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex gap-2 pt-2&quot;&gt;&#10;                        &lt;Button&#10;                            onClick={handleSave}&#10;                            size=&quot;sm&quot;&#10;                            disabled={isLoading}&#10;                            className=&quot;bg-green-600 hover:bg-green-700&quot;&#10;                        &gt;&#10;                            &lt;Save className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                            Save&#10;                        &lt;/Button&gt;&#10;                        &lt;Button onClick={handleCancel} variant=&quot;outline&quot; size=&quot;sm&quot; disabled={isLoading}&gt;&#10;                            &lt;X className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                            Exit&#10;                        &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;ml-7 p-3 bg-gray-50 rounded-lg&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {getStatusIcon(status)}&#10;                    &lt;span className=&quot;font-medium text-gray-900 text-sm&quot;&gt;&#10;                        {formatDate(record.date)}&#10;                    &lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {getStatusBadge(status)}&#10;                    {isEditMode &amp;&amp; (&#10;                        &lt;div className=&quot;flex gap-1&quot;&gt;&#10;                            &lt;Button&#10;                                onClick={() =&gt; setIsEditing(true)}&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                className=&quot;h-7 w-7 p-0&quot;&#10;                            &gt;&#10;                                &lt;Edit className=&quot;h-3 w-3&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                            &lt;Button&#10;                                onClick={handleDelete}&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                className=&quot;h-7 w-7 p-0 text-red-600 hover:text-red-700 hover:bg-red-50&quot;&#10;                                disabled={isLoading}&#10;                            &gt;&#10;                                &lt;Trash2 className=&quot;h-3 w-3&quot; /&gt;&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;grid grid-cols-2 gap-4 ml-6&quot;&gt;&#10;                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check In&lt;/p&gt;&#10;                    &lt;p className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                        {record.checkInTime || '--:--'}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;space-y-1&quot;&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check Out&lt;/p&gt;&#10;                    &lt;p className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                        {record.checkOutTime || '--:--'}&#10;                    &lt;/p&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/types.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/types.ts" />
              <option name="originalContent" value="export interface UserDetail {&#10;    id: string;&#10;    userName: string;&#10;    email: string;&#10;    hoursInShop: number;&#10;    attendanceRecords: Array&lt;{&#10;        id: number;&#10;        date: string;&#10;        checkInTime: string | null;&#10;        checkOutTime: string | null;&#10;    }&gt;;&#10;}&#10;&#10;export interface AttendanceRecord {&#10;    id: number;&#10;    date: string;&#10;    checkInTime: string | null;&#10;    checkOutTime: string | null;&#10;}&#10;&#10;export interface WeeklyAttendance {&#10;    weekStart: Date;&#10;    weekEnd: Date;&#10;    weekLabel: string;&#10;    records: AttendanceRecord[];&#10;    summary: {&#10;        present: number;&#10;        absent: number;&#10;        total: number;&#10;    };&#10;}&#10;&#10;export interface UserDetailSheetProps {&#10;    userId: string;&#10;    open: boolean;&#10;    onOpenChange: (open: boolean) =&gt; void;&#10;}" />
              <option name="updatedContent" value="export interface UserDetail {&#10;    id: string;&#10;    userName: string;&#10;    email: string;&#10;    role?: string;&#10;    hoursInShop: number;&#10;    attendanceRecords: Array&lt;{&#10;        id: number;&#10;        date: string;&#10;        checkInTime: string | null;&#10;        checkOutTime: string | null;&#10;    }&gt;;&#10;}&#10;&#10;export interface AttendanceRecord {&#10;    id: number;&#10;    date: string;&#10;    checkInTime: string | null;&#10;    checkOutTime: string | null;&#10;}&#10;&#10;export interface WeeklyAttendance {&#10;    weekStart: Date;&#10;    weekEnd: Date;&#10;    weekLabel: string;&#10;    records: AttendanceRecord[];&#10;    summary: {&#10;        present: number;&#10;        absent: number;&#10;        total: number;&#10;    };&#10;}&#10;&#10;export interface UserDetailSheetProps {&#10;    userId: string;&#10;    open: boolean;&#10;    onOpenChange: (open: boolean) =&gt; void;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/user-detail-sheet.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/user-detail-sheet.tsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { Sheet, SheetContent } from &quot;@/components/ui/sheet&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Plus } from &quot;lucide-react&quot;;&#10;import { getUserDetail, createAttendanceRecord } from &quot;@/app/admin/dashboard/_actions/server-actions&quot;;&#10;import { LoadingState } from './loading-state';&#10;import { UserHeader } from './user-header';&#10;import { UserInfoCard } from './user-info-card';&#10;import { AttendanceOverviewCard } from './attendance-overview-card';&#10;import { WeeklyAttendanceCard } from './weekly-attendance-card';&#10;import { EditableAttendanceRecord } from './editable-attendance-record';&#10;import { groupAttendanceByWeek, getAttendanceStatus } from './utils';&#10;import type { UserDetail, UserDetailSheetProps, AttendanceRecord } from './types';&#10;&#10;function UserDetailSheet({ userId, open, onOpenChange }: UserDetailSheetProps) {&#10;    const [expandedWeeks, setExpandedWeeks] = useState&lt;Set&lt;string&gt;&gt;(new Set());&#10;    const [user, setUser] = useState&lt;UserDetail | null&gt;(null);&#10;    const [loading, setLoading] = useState(false);&#10;    const [isEditMode, setIsEditMode] = useState(false);&#10;&#10;    useEffect(() =&gt; {&#10;        if (userId &amp;&amp; open) {&#10;            setLoading(true);&#10;            getUserDetail(userId)&#10;                .then(setUser)&#10;                .catch(console.error)&#10;                .finally(() =&gt; setLoading(false));&#10;        }&#10;    }, [userId, open]);&#10;&#10;    // Reset edit mode when sheet closes&#10;    useEffect(() =&gt; {&#10;        if (!open) {&#10;            setIsEditMode(false);&#10;        }&#10;    }, [open]);&#10;&#10;    const toggleWeek = (weekKey: string) =&gt; {&#10;        const newExpanded = new Set(expandedWeeks);&#10;        if (newExpanded.has(weekKey)) {&#10;            newExpanded.delete(weekKey);&#10;        } else {&#10;            newExpanded.add(weekKey);&#10;        }&#10;        setExpandedWeeks(newExpanded);&#10;    };&#10;&#10;    const handleToggleEditMode = () =&gt; {&#10;        setIsEditMode(!isEditMode);&#10;    };&#10;&#10;    const handleUpdateRecord = (updatedRecord: AttendanceRecord) =&gt; {&#10;        if (!user) return;&#10;&#10;        setUser({&#10;            ...user,&#10;            attendanceRecords: user.attendanceRecords.map(record =&gt;&#10;                record.id === updatedRecord.id ? updatedRecord : record&#10;            )&#10;        });&#10;    };&#10;&#10;    const handleDeleteRecord = (recordId: number) =&gt; {&#10;        if (!user) return;&#10;&#10;        setUser({&#10;            ...user,&#10;            attendanceRecords: user.attendanceRecords.filter(record =&gt; record.id !== recordId)&#10;        });&#10;    };&#10;&#10;    const handleAddNewRecord = async () =&gt; {&#10;        if (!user) return;&#10;&#10;        const today = new Date().toISOString().split('T')[0];&#10;        const now = new Date();&#10;        const currentTime = now.toLocaleTimeString([], {&#10;            hour: '2-digit',&#10;            minute: '2-digit',&#10;            hour12: true&#10;        });&#10;&#10;        try {&#10;            const result = await createAttendanceRecord({&#10;                userId: user.id,&#10;                date: today,&#10;                checkInTime: now,&#10;                status: 'present'&#10;            });&#10;&#10;            if (result.success &amp;&amp; result.record) {&#10;                const newRecord: AttendanceRecord = {&#10;                    id: result.record.id,&#10;                    date: today,&#10;                    checkInTime: currentTime,&#10;                    checkOutTime: null&#10;                };&#10;&#10;                setUser({&#10;                    ...user,&#10;                    attendanceRecords: [newRecord, ...user.attendanceRecords]&#10;                });&#10;            } else {&#10;                console.error('Failed to create record:', result.error);&#10;                alert('Failed to create new record: ' + (result.error || 'Unknown error'));&#10;            }&#10;        } catch (error) {&#10;            console.error('Error adding new record:', error);&#10;            alert('Failed to create new record. Please try again.');&#10;        }&#10;    };&#10;&#10;    if (loading || !user) {&#10;        return &lt;LoadingState open={open} onOpenChange={onOpenChange} /&gt;;&#10;    }&#10;&#10;    const weeklyData = groupAttendanceByWeek(user);&#10;    const totalStats = user.attendanceRecords.reduce(&#10;        (acc, record) =&gt; {&#10;            const status = getAttendanceStatus(record.checkInTime, record.checkOutTime);&#10;            acc.total++;&#10;            if (status === 'complete') acc.present++;&#10;            else acc.absent++;&#10;            return acc;&#10;        },&#10;        { present: 0, absent: 0, total: 0 }&#10;    );&#10;&#10;    return (&#10;        &lt;Sheet open={open} onOpenChange={onOpenChange}&gt;&#10;            &lt;SheetContent&#10;                side=&quot;bottom&quot;&#10;                className=&quot;h-[90vh] p-0 overflow-hidden&quot;&#10;                style={{&#10;                    maxHeight: '90vh',&#10;                    display: 'flex',&#10;                    flexDirection: 'column',&#10;                }}&#10;            &gt;&#10;                &lt;UserHeader&#10;                    userName={user.userName}&#10;                    userId={user.id}&#10;                    isEditMode={isEditMode}&#10;                    onToggleEditMode={handleToggleEditMode}&#10;                /&gt;&#10;&#10;                &lt;div&#10;                    className=&quot;flex-1 overflow-y-auto overflow-x-hidden&quot;&#10;                    style={{&#10;                        WebkitOverflowScrolling: 'touch',&#10;                        height: 'calc(90vh - 120px)',&#10;                        overscrollBehavior: 'contain'&#10;                    }}&#10;                &gt;&#10;                    &lt;div className=&quot;px-6 py-4 space-y-6&quot;&gt;&#10;                        &lt;UserInfoCard&#10;                            email={user.email}&#10;                            hoursInShop={user.hoursInShop}&#10;                        /&gt;&#10;&#10;                        &lt;AttendanceOverviewCard stats={totalStats} /&gt;&#10;&#10;                        {isEditMode &amp;&amp; (&#10;                            &lt;div className=&quot;flex justify-between items-center p-4 bg-blue-50 border border-blue-200 rounded-lg&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;h3 className=&quot;font-semibold text-blue-900&quot;&gt;Edit Mode Active&lt;/h3&gt;&#10;                                    &lt;p className=&quot;text-sm text-blue-700&quot;&gt;Click on attendance records to edit or delete them&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;Button&#10;                                    onClick={handleAddNewRecord}&#10;                                    size=&quot;sm&quot;&#10;                                    className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;                                &gt;&#10;                                    &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                                    Add Record&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {isEditMode ? (&#10;                            // Edit mode: show individual records with edit capabilities&#10;                            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;All Attendance Records&lt;/h3&gt;&#10;                                {user.attendanceRecords.map((record) =&gt; (&#10;                                    &lt;EditableAttendanceRecord&#10;                                        key={record.id}&#10;                                        record={record}&#10;                                        userId={user.id}&#10;                                        onUpdateAction={handleUpdateRecord}&#10;                                        onDeleteAction={handleDeleteRecord}&#10;                                        isEditMode={isEditMode}&#10;                                    /&gt;&#10;                                ))}&#10;                            &lt;/div&gt;&#10;                        ) : (&#10;                            // View mode: show weekly grouped records&#10;                            &lt;WeeklyAttendanceCard&#10;                                weeklyData={weeklyData}&#10;                                expandedWeeks={expandedWeeks}&#10;                                onToggleWeek={toggleWeek}&#10;                            /&gt;&#10;                        )}&#10;&#10;                        &lt;div className=&quot;h-20&quot;&gt;&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/SheetContent&gt;&#10;        &lt;/Sheet&gt;&#10;    );&#10;}&#10;&#10;export default UserDetailSheet;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import { Sheet, SheetContent } from &quot;@/components/ui/sheet&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Plus } from &quot;lucide-react&quot;;&#10;import { getUserDetail, createAttendanceRecord } from &quot;@/app/admin/dashboard/_actions/server-actions&quot;;&#10;import { LoadingState } from './loading-state';&#10;import { UserHeader } from './user-header';&#10;import { UserInfoCard } from './user-info-card';&#10;import { AttendanceOverviewCard } from './attendance-overview-card';&#10;import { WeeklyAttendanceCard } from './weekly-attendance-card';&#10;import { EditableAttendanceRecord } from './editable-attendance-record';&#10;import { groupAttendanceByWeek, getAttendanceStatus } from './utils';&#10;import type { UserDetail, UserDetailSheetProps, AttendanceRecord } from './types';&#10;&#10;function UserDetailSheet({ userId, open, onOpenChange }: UserDetailSheetProps) {&#10;    const [expandedWeeks, setExpandedWeeks] = useState&lt;Set&lt;string&gt;&gt;(new Set());&#10;    const [user, setUser] = useState&lt;UserDetail | null&gt;(null);&#10;    const [loading, setLoading] = useState(false);&#10;    const [isEditMode, setIsEditMode] = useState(false);&#10;&#10;    useEffect(() =&gt; {&#10;        if (userId &amp;&amp; open) {&#10;            setLoading(true);&#10;            getUserDetail(userId)&#10;                .then(setUser)&#10;                .catch(console.error)&#10;                .finally(() =&gt; setLoading(false));&#10;        }&#10;    }, [userId, open]);&#10;&#10;    // Reset edit mode when sheet closes&#10;    useEffect(() =&gt; {&#10;        if (!open) {&#10;            setIsEditMode(false);&#10;        }&#10;    }, [open]);&#10;&#10;    const toggleWeek = (weekKey: string) =&gt; {&#10;        const newExpanded = new Set(expandedWeeks);&#10;        if (newExpanded.has(weekKey)) {&#10;            newExpanded.delete(weekKey);&#10;        } else {&#10;            newExpanded.add(weekKey);&#10;        }&#10;        setExpandedWeeks(newExpanded);&#10;    };&#10;&#10;    const handleToggleEditMode = () =&gt; {&#10;        setIsEditMode(!isEditMode);&#10;    };&#10;&#10;    const handleRoleUpdated = () =&gt; {&#10;        // Refresh user data to get updated role&#10;        if (userId) {&#10;            setLoading(true);&#10;            getUserDetail(userId)&#10;                .then(setUser)&#10;                .catch(console.error)&#10;                .finally(() =&gt; setLoading(false));&#10;        }&#10;    };&#10;&#10;    const handleUpdateRecord = (updatedRecord: AttendanceRecord) =&gt; {&#10;        if (!user) return;&#10;&#10;        setUser({&#10;            ...user,&#10;            attendanceRecords: user.attendanceRecords.map(record =&gt;&#10;                record.id === updatedRecord.id ? updatedRecord : record&#10;            )&#10;        });&#10;    };&#10;&#10;    const handleDeleteRecord = (recordId: number) =&gt; {&#10;        if (!user) return;&#10;&#10;        setUser({&#10;            ...user,&#10;            attendanceRecords: user.attendanceRecords.filter(record =&gt; record.id !== recordId)&#10;        });&#10;    };&#10;&#10;    const handleAddNewRecord = async () =&gt; {&#10;        if (!user) return;&#10;&#10;        const today = new Date().toISOString().split('T')[0];&#10;        const now = new Date();&#10;        const currentTime = now.toLocaleTimeString([], {&#10;            hour: '2-digit',&#10;            minute: '2-digit',&#10;            hour12: true&#10;        });&#10;&#10;        try {&#10;            const result = await createAttendanceRecord({&#10;                userId: user.id,&#10;                date: today,&#10;                checkInTime: now,&#10;                status: 'present'&#10;            });&#10;&#10;            if (result.success &amp;&amp; result.record) {&#10;                const newRecord: AttendanceRecord = {&#10;                    id: result.record.id,&#10;                    date: today,&#10;                    checkInTime: currentTime,&#10;                    checkOutTime: null&#10;                };&#10;&#10;                setUser({&#10;                    ...user,&#10;                    attendanceRecords: [newRecord, ...user.attendanceRecords]&#10;                });&#10;            } else {&#10;                console.error('Failed to create record:', result.error);&#10;                alert('Failed to create new record: ' + (result.error || 'Unknown error'));&#10;            }&#10;        } catch (error) {&#10;            console.error('Error adding new record:', error);&#10;            alert('Failed to create new record. Please try again.');&#10;        }&#10;    };&#10;&#10;    if (loading || !user) {&#10;        return &lt;LoadingState open={open} onOpenChange={onOpenChange} /&gt;;&#10;    }&#10;&#10;    const weeklyData = groupAttendanceByWeek(user);&#10;    const totalStats = user.attendanceRecords.reduce(&#10;        (acc, record) =&gt; {&#10;            const status = getAttendanceStatus(record.checkInTime, record.checkOutTime);&#10;            acc.total++;&#10;            if (status === 'complete') acc.present++;&#10;            else acc.absent++;&#10;            return acc;&#10;        },&#10;        { present: 0, absent: 0, total: 0 }&#10;    );&#10;&#10;    return (&#10;        &lt;Sheet open={open} onOpenChange={onOpenChange}&gt;&#10;            &lt;SheetContent&#10;                side=&quot;bottom&quot;&#10;                className=&quot;h-[90vh] p-0 overflow-hidden&quot;&#10;                style={{&#10;                    maxHeight: '90vh',&#10;                    display: 'flex',&#10;                    flexDirection: 'column',&#10;                }}&#10;            &gt;&#10;                &lt;UserHeader&#10;                    userName={user.userName}&#10;                    userId={user.id}&#10;                    userRole={user.role}&#10;                    isEditMode={isEditMode}&#10;                    onToggleEditMode={handleToggleEditMode}&#10;                    onRoleUpdated={handleRoleUpdated}&#10;                /&gt;&#10;&#10;                &lt;div&#10;                    className=&quot;flex-1 overflow-y-auto overflow-x-hidden&quot;&#10;                    style={{&#10;                        WebkitOverflowScrolling: 'touch',&#10;                        height: 'calc(90vh - 120px)',&#10;                        overscrollBehavior: 'contain'&#10;                    }}&#10;                &gt;&#10;                    &lt;div className=&quot;px-6 py-4 space-y-6&quot;&gt;&#10;                        &lt;UserInfoCard&#10;                            email={user.email}&#10;                            hoursInShop={user.hoursInShop}&#10;                        /&gt;&#10;&#10;                        &lt;AttendanceOverviewCard stats={totalStats} /&gt;&#10;&#10;                        {isEditMode &amp;&amp; (&#10;                            &lt;div className=&quot;flex justify-between items-center p-4 bg-blue-50 border border-blue-200 rounded-lg&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;h3 className=&quot;font-semibold text-blue-900&quot;&gt;Edit Mode Active&lt;/h3&gt;&#10;                                    &lt;p className=&quot;text-sm text-blue-700&quot;&gt;Click on attendance records to edit or delete them&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;Button&#10;                                    onClick={handleAddNewRecord}&#10;                                    size=&quot;sm&quot;&#10;                                    className=&quot;bg-blue-600 hover:bg-blue-700&quot;&#10;                                &gt;&#10;                                    &lt;Plus className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                                    Add Record&#10;                                &lt;/Button&gt;&#10;                            &lt;/div&gt;&#10;                        )}&#10;&#10;                        {isEditMode ? (&#10;                            // Edit mode: show individual records with edit capabilities&#10;                            &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;All Attendance Records&lt;/h3&gt;&#10;                                {user.attendanceRecords.map((record) =&gt; (&#10;                                    &lt;EditableAttendanceRecord&#10;                                        key={record.id}&#10;                                        record={record}&#10;                                        userId={user.id}&#10;                                        onUpdateAction={handleUpdateRecord}&#10;                                        onDeleteAction={handleDeleteRecord}&#10;                                        isEditMode={isEditMode}&#10;                                    /&gt;&#10;                                ))}&#10;                            &lt;/div&gt;&#10;                        ) : (&#10;                            // View mode: show weekly grouped records&#10;                            &lt;WeeklyAttendanceCard&#10;                                weeklyData={weeklyData}&#10;                                expandedWeeks={expandedWeeks}&#10;                                onToggleWeek={toggleWeek}&#10;                            /&gt;&#10;                        )}&#10;&#10;                        &lt;div className=&quot;h-20&quot;&gt;&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/SheetContent&gt;&#10;        &lt;/Sheet&gt;&#10;    );&#10;}&#10;&#10;export default UserDetailSheet;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/user-header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-detail/user-header.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import { Avatar, AvatarFallback } from &quot;@/components/ui/avatar&quot;;&#10;import { SheetDescription, SheetTitle } from &quot;@/components/ui/sheet&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Edit, Save, X } from &quot;lucide-react&quot;;&#10;&#10;function getInitials(name: string): string {&#10;    return name&#10;        .split(' ')&#10;        .map(word =&gt; word.charAt(0))&#10;        .join('')&#10;        .toUpperCase()&#10;        .slice(0, 2);&#10;}&#10;&#10;interface UserHeaderProps {&#10;    userName: string;&#10;    userId: string;&#10;    isEditMode?: boolean;&#10;    onToggleEditMode?: () =&gt; void;&#10;}&#10;&#10;export function UserHeader({ userName, userId, isEditMode = false, onToggleEditMode }: UserHeaderProps) {&#10;    return (&#10;        &lt;div className=&quot;px-6 py-4 border-b bg-gradient-to-r from-blue-50 to-indigo-50 flex-shrink-0&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;Avatar className=&quot;h-16 w-16 border-2 border-white shadow-lg&quot;&gt;&#10;                        &lt;AvatarFallback className=&quot;bg-gradient-to-br from-blue-500 to-indigo-600 text-white text-lg font-semibold&quot;&gt;&#10;                            {getInitials(userName)}&#10;                        &lt;/AvatarFallback&gt;&#10;                    &lt;/Avatar&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                        &lt;SheetTitle className=&quot;text-xl font-bold text-gray-900&quot;&gt;&#10;                            {userName}&#10;                        &lt;/SheetTitle&gt;&#10;                        &lt;SheetDescription className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                            {isEditMode ? 'Editing Attendance Records' : 'Member Attendance Details'}&#10;                        &lt;/SheetDescription&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {onToggleEditMode &amp;&amp; (&#10;                    &lt;Button&#10;                        onClick={onToggleEditMode}&#10;                        variant={isEditMode ? &quot;destructive&quot; : &quot;outline&quot;}&#10;                        size=&quot;sm&quot;&#10;                        className=&quot;ml-4&quot;&#10;                    &gt;&#10;                        {isEditMode ? (&#10;                            &lt;&gt;&#10;                                &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                                Exit&#10;                            &lt;/&gt;&#10;                        ) : (&#10;                            &lt;&gt;&#10;                                &lt;Edit className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                                Edit&#10;                            &lt;/&gt;&#10;                        )}&#10;                    &lt;/Button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Avatar, AvatarFallback } from &quot;@/components/ui/avatar&quot;;&#10;import { SheetDescription, SheetTitle } from &quot;@/components/ui/sheet&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Edit, X, UserCheck } from &quot;lucide-react&quot;;&#10;import { authClient } from &quot;@/lib/auth-client&quot;;&#10;&#10;function getInitials(name: string): string {&#10;    return name&#10;        .split(' ')&#10;        .map(word =&gt; word.charAt(0))&#10;        .join('')&#10;        .toUpperCase()&#10;        .slice(0, 2);&#10;}&#10;&#10;interface UserHeaderProps {&#10;    userName: string;&#10;    userId: string;&#10;    userRole?: string;&#10;    isEditMode?: boolean;&#10;    onToggleEditMode?: () =&gt; void;&#10;    onRoleUpdated?: () =&gt; void;&#10;}&#10;&#10;export function UserHeader({ &#10;    userName, &#10;    userId, &#10;    userRole,&#10;    isEditMode = false, &#10;    onToggleEditMode,&#10;    onRoleUpdated &#10;}: UserHeaderProps) {&#10;    const [isUpdatingRole, setIsUpdatingRole] = useState(false);&#10;&#10;    const handleMakeAdmin = async () =&gt; {&#10;        if (!confirm(`Are you sure you want to make ${userName} an administrator?`)) return;&#10;        &#10;        setIsUpdatingRole(true);&#10;        try {&#10;            const { data, error } = await authClient.admin.setRole({&#10;                userId: userId,&#10;                role: &quot;admin&quot;,&#10;            });&#10;&#10;            if (error) {&#10;                console.error('Error setting admin role:', error);&#10;                alert('Failed to update user role. Please try again.');&#10;            } else {&#10;                console.log('Successfully updated user role:', data);&#10;                alert(`${userName} is now an administrator!`);&#10;                onRoleUpdated?.();&#10;            }&#10;        } catch (error) {&#10;            console.error('Error making user admin:', error);&#10;            alert('Failed to update user role. Please try again.');&#10;        } finally {&#10;            setIsUpdatingRole(false);&#10;        }&#10;    };&#10;&#10;    const isAlreadyAdmin = userRole === 'admin';&#10;&#10;    return (&#10;        &lt;div className=&quot;px-6 py-4 border-b bg-gradient-to-r from-blue-50 to-indigo-50 flex-shrink-0&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;Avatar className=&quot;h-16 w-16 border-2 border-white shadow-lg&quot;&gt;&#10;                        &lt;AvatarFallback className=&quot;bg-gradient-to-br from-blue-500 to-indigo-600 text-white text-lg font-semibold&quot;&gt;&#10;                            {getInitials(userName)}&#10;                        &lt;/AvatarFallback&gt;&#10;                    &lt;/Avatar&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                        &lt;SheetTitle className=&quot;text-xl font-bold text-gray-900&quot;&gt;&#10;                            {userName}&#10;                            {isAlreadyAdmin &amp;&amp; (&#10;                                &lt;span className=&quot;ml-2 px-2 py-1 text-xs bg-purple-100 text-purple-800 rounded-full&quot;&gt;&#10;                                    Admin&#10;                                &lt;/span&gt;&#10;                            )}&#10;                        &lt;/SheetTitle&gt;&#10;                        &lt;SheetDescription className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                            {isEditMode ? 'Editing Attendance Records' : 'Member Attendance Details'}&#10;                        &lt;/SheetDescription&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &#10;                &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                    {!isAlreadyAdmin &amp;&amp; (&#10;                        &lt;Button&#10;                            onClick={handleMakeAdmin}&#10;                            disabled={isUpdatingRole}&#10;                            variant=&quot;secondary&quot;&#10;                            size=&quot;sm&quot;&#10;                            className=&quot;bg-purple-100 hover:bg-purple-200 text-purple-800&quot;&#10;                        &gt;&#10;                            &lt;UserCheck className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                            {isUpdatingRole ? 'Making Admin...' : 'Make Admin'}&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                    &#10;                    {onToggleEditMode &amp;&amp; (&#10;                        &lt;Button&#10;                            onClick={onToggleEditMode}&#10;                            variant={isEditMode ? &quot;destructive&quot; : &quot;outline&quot;}&#10;                            size=&quot;sm&quot;&#10;                        &gt;&#10;                            {isEditMode ? (&#10;                                &lt;&gt;&#10;                                    &lt;X className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                                    Exit&#10;                                &lt;/&gt;&#10;                            ) : (&#10;                                &lt;&gt;&#10;                                    &lt;Edit className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;                                    Edit&#10;                                &lt;/&gt;&#10;                            )}&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-table.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/dashboard/_components/user-table.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import {ColumnDef} from &quot;@tanstack/table-core&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {Eye} from &quot;lucide-react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {useDataTable} from &quot;@/hooks/use-data-table&quot;;&#10;import {DataTable} from &quot;@/components/data-table/data-table&quot;;&#10;import UserDetailSheet from &quot;@/app/admin/dashboard/_components/user-detail/user-detail-sheet&quot;;&#10;&#10;export interface TableUser {&#10;    id: string,&#10;    userName: string,&#10;    hours: number&#10;}&#10;&#10;export function UserTable({ users } : { users: TableUser[] }) {&#10;    const [open, setOpen] = useState(false);&#10;    const [selectedUser, setSelectedUser] = useState&lt;string | null&gt;(null);&#10;&#10;    const columns = React.useMemo&lt;ColumnDef&lt;TableUser&gt;[]&gt;(&#10;        () =&gt; [&#10;            {&#10;                id: 'name',&#10;                accessorKey: 'userName',&#10;                header: 'User Name',&#10;                cell: info =&gt; info.getValue(),&#10;            },&#10;            {&#10;                accessorKey: 'hours',&#10;                header: 'Hours In Shop',&#10;                cell: info =&gt; info.getValue(),&#10;            },&#10;            {&#10;                id: &quot;actions&quot;,&#10;                cell: function Cell({ row }) {&#10;                    return (&#10;                        &lt;Button&#10;                            onClick={() =&gt; {&#10;                                const userRow = row.original;&#10;                                setSelectedUser(userRow.id);&#10;                                setOpen(true);&#10;                            }}&#10;                            variant=&quot;ghost&quot;&#10;                        &gt;&#10;                            &lt;Eye /&gt;&#10;                        &lt;/Button&gt;&#10;                    );&#10;                },&#10;                size: 32,&#10;            },&#10;        ],&#10;        [],&#10;    );&#10;&#10;    const { table } = useDataTable({&#10;        data: users,&#10;        columns,&#10;        pageCount: 1,&#10;        initialState: {&#10;            sorting: [{ id: &quot;hours&quot;, desc: true }],&#10;            columnPinning: { right: [&quot;actions&quot;] },&#10;        },&#10;        getRowId: (row) =&gt; row.id,&#10;    });&#10;&#10;    return (&#10;        &lt;div className=&quot;data-table-container&quot;&gt;&#10;            &lt;DataTable table={table}&gt;&#10;                &lt;UserDetailSheet&#10;                    // @ts-ignore (will never be null when open)&#10;                    userId={selectedUser}&#10;                    open={open}&#10;                    onOpenChange={setOpen}&#10;                /&gt;&#10;            &lt;/DataTable&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="'use client';&#10;&#10;import {ColumnDef} from &quot;@tanstack/table-core&quot;;&#10;import React, {useState} from &quot;react&quot;;&#10;import {Eye, Download} from &quot;lucide-react&quot;;&#10;import {Button} from &quot;@/components/ui/button&quot;;&#10;import {useDataTable} from &quot;@/hooks/use-data-table&quot;;&#10;import {DataTable} from &quot;@/components/data-table/data-table&quot;;&#10;import {DataTableToolbar} from &quot;@/components/data-table/data-table-toolbar&quot;;&#10;import UserDetailSheet from &quot;@/app/admin/dashboard/_components/user-detail/user-detail-sheet&quot;;&#10;&#10;export interface TableUser {&#10;    id: string,&#10;    userName: string,&#10;    hours: number&#10;}&#10;&#10;export function UserTable({ users } : { users: TableUser[] }) {&#10;    const [open, setOpen] = useState(false);&#10;    const [selectedUser, setSelectedUser] = useState&lt;string | null&gt;(null);&#10;&#10;    const exportToCSV = () =&gt; {&#10;        // Create CSV content&#10;        const headers = ['ID', 'Name', 'Hours'];&#10;        const csvContent = [&#10;            headers.join(','),&#10;            ...users.map(user =&gt; [&#10;                user.id,&#10;                `&quot;${user.userName}&quot;`, // Wrap name in quotes to handle commas&#10;                user.hours&#10;            ].join(','))&#10;        ].join('\n');&#10;&#10;        // Create and download file&#10;        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });&#10;        const link = document.createElement('a');&#10;        &#10;        if (link.download !== undefined) {&#10;            const url = URL.createObjectURL(blob);&#10;            link.setAttribute('href', url);&#10;            link.setAttribute('download', `user-attendance-${new Date().toISOString().split('T')[0]}.csv`);&#10;            link.style.visibility = 'hidden';&#10;            document.body.appendChild(link);&#10;            link.click();&#10;            document.body.removeChild(link);&#10;        }&#10;    };&#10;&#10;    const columns = React.useMemo&lt;ColumnDef&lt;TableUser&gt;[]&gt;(&#10;        () =&gt; [&#10;            {&#10;                id: 'name',&#10;                accessorKey: 'userName',&#10;                header: 'User Name',&#10;                cell: info =&gt; info.getValue(),&#10;            },&#10;            {&#10;                accessorKey: 'hours',&#10;                header: 'Hours In Shop',&#10;                cell: info =&gt; info.getValue(),&#10;            },&#10;            {&#10;                id: &quot;actions&quot;,&#10;                cell: function Cell({ row }) {&#10;                    return (&#10;                        &lt;Button&#10;                            onClick={() =&gt; {&#10;                                const userRow = row.original;&#10;                                setSelectedUser(userRow.id);&#10;                                setOpen(true);&#10;                            }}&#10;                            variant=&quot;ghost&quot;&#10;                        &gt;&#10;                            &lt;Eye /&gt;&#10;                        &lt;/Button&gt;&#10;                    );&#10;                },&#10;                size: 32,&#10;            },&#10;        ],&#10;        [],&#10;    );&#10;&#10;    const { table } = useDataTable({&#10;        data: users,&#10;        columns,&#10;        pageCount: 1,&#10;        initialState: {&#10;            sorting: [{ id: &quot;title&quot;, desc: true }],&#10;            columnPinning: { right: [&quot;actions&quot;] },&#10;        },&#10;        getRowId: (row) =&gt; row.id,&#10;    });&#10;&#10;    return (&#10;        &lt;div className=&quot;data-table-container&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between pb-4&quot;&gt;&#10;                &lt;h3 className=&quot;text-lg font-semibold&quot;&gt;Users&lt;/h3&gt;&#10;                &lt;Button &#10;                    onClick={exportToCSV}&#10;                    variant=&quot;outline&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;flex items-center gap-2&quot;&#10;                &gt;&#10;                    &lt;Download className=&quot;h-4 w-4&quot; /&gt;&#10;                    Export CSV&#10;                &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;DataTable table={table}&gt;&#10;                &lt;DataTableToolbar table={table} /&gt;&#10;                &lt;UserDetailSheet&#10;                    // @ts-ignore (will never be null when open)&#10;                    userId={selectedUser}&#10;                    open={open}&#10;                    onOpenChange={setOpen}&#10;                /&gt;&#10;            &lt;/DataTable&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/user/[userId]/_actions/server-actions.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/user/[userId]/_actions/server-actions.ts" />
              <option name="originalContent" value="&quot;use server&quot;;&#10;&#10;import { db, attendance, user } from &quot;@/index&quot;;&#10;import { eq, desc, and } from &quot;drizzle-orm&quot;;&#10;&#10;export interface AttendanceRecord {&#10;    id?: number;&#10;    date: string;&#10;    checkInTime: string | null;&#10;    checkOutTime: string | null;&#10;    action: 'check-in' | 'check-out';&#10;    timestamp: Date;&#10;}&#10;&#10;export async function getUserAttendanceRecords(userId: string): Promise&lt;AttendanceRecord[]&gt; {&#10;    const records = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId))&#10;        .orderBy(desc(attendance.timestamp));&#10;&#10;    // Group records by date and combine check-ins/check-outs&#10;    const groupedRecords: { [date: string]: AttendanceRecord } = {};&#10;&#10;    for (const record of records) {&#10;        const dateStr = record.timestamp.toISOString().split('T')[0];&#10;        const timeStr = record.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });&#10;&#10;        if (!groupedRecords[dateStr]) {&#10;            groupedRecords[dateStr] = {&#10;                id: record.id,&#10;                date: dateStr,&#10;                checkInTime: null,&#10;                checkOutTime: null,&#10;                action: record.action as 'check-in' | 'check-out',&#10;                timestamp: record.timestamp&#10;            };&#10;        }&#10;&#10;        if (record.action === 'check-in') {&#10;            groupedRecords[dateStr].checkInTime = timeStr;&#10;        } else if (record.action === 'check-out') {&#10;            groupedRecords[dateStr].checkOutTime = timeStr;&#10;        }&#10;    }&#10;&#10;    return Object.values(groupedRecords).sort((a, b) =&gt;&#10;        new Date(b.date).getTime() - new Date(a.date).getTime()&#10;    );&#10;}&#10;&#10;export async function updateUserAttendanceRecords(&#10;    userId: string,&#10;    records: AttendanceRecord[]&#10;): Promise&lt;void&gt; {&#10;    // First, delete all existing attendance records for this user&#10;    await db.delete(attendance).where(eq(attendance.userId, userId));&#10;&#10;    // Then insert the new records&#10;    const attendanceEntries = [];&#10;&#10;    for (const record of records) {&#10;        // Create check-in entry if time exists&#10;        if (record.checkInTime) {&#10;            const checkInDateTime = new Date(`${record.date}T${record.checkInTime}:00`);&#10;            attendanceEntries.push({&#10;                userId: userId,&#10;                action: 'check-in',&#10;                timestamp: checkInDateTime,&#10;                status: 'present'&#10;            });&#10;        }&#10;&#10;        // Create check-out entry if time exists&#10;        if (record.checkOutTime) {&#10;            const checkOutDateTime = new Date(`${record.date}T${record.checkOutTime}:00`);&#10;            attendanceEntries.push({&#10;                userId: userId,&#10;                action: 'check-out',&#10;                timestamp: checkOutDateTime,&#10;                status: 'present'&#10;            });&#10;        }&#10;    }&#10;&#10;    if (attendanceEntries.length &gt; 0) {&#10;        await db.insert(attendance).values(attendanceEntries);&#10;    }&#10;}&#10;&#10;export async function getUserInfo(userId: string) {&#10;    const userInfo = await db&#10;        .select({&#10;            id: user.id,&#10;            name: user.name,&#10;            email: user.email&#10;        })&#10;        .from(user)&#10;        .where(eq(user.id, userId))&#10;        .limit(1);&#10;&#10;    if (userInfo.length === 0) {&#10;        throw new Error(&quot;User not found&quot;);&#10;    }&#10;&#10;    return userInfo[0];&#10;}&#10;&#10;export async function deleteAttendanceRecord(userId: string, recordId: number): Promise&lt;void&gt; {&#10;    await db&#10;        .delete(attendance)&#10;        .where(&#10;            and(&#10;                eq(attendance.userId, userId),&#10;                eq(attendance.id, recordId)&#10;            )&#10;        );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use server&quot;;&#10;&#10;import { db, attendance, user } from &quot;@/index&quot;;&#10;import { eq, desc, and } from &quot;drizzle-orm&quot;;&#10;&#10;export interface AttendanceRecord {&#10;    id?: number;&#10;    date: string;&#10;    checkInTime: string | null;&#10;    checkOutTime: string | null;&#10;    action: 'check-in' | 'check-out';&#10;    timestamp: Date;&#10;}&#10;&#10;export async function getUserAttendanceRecords(userId: string): Promise&lt;AttendanceRecord[]&gt; {&#10;    const records = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(eq(attendance.userId, userId))&#10;        .orderBy(desc(attendance.timestamp));&#10;&#10;    // Group records by date and combine check-ins/check-outs&#10;    const groupedRecords: { [date: string]: AttendanceRecord } = {};&#10;&#10;    for (const record of records) {&#10;        const dateStr = record.timestamp.toISOString().split('T')[0];&#10;        const timeStr = record.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });&#10;&#10;        if (!groupedRecords[dateStr]) {&#10;            groupedRecords[dateStr] = {&#10;                id: record.id,&#10;                date: dateStr,&#10;                checkInTime: null,&#10;                checkOutTime: null,&#10;                action: record.action as 'check-in' | 'check-out',&#10;                timestamp: record.timestamp&#10;            };&#10;        }&#10;&#10;        if (record.action === 'check-in') {&#10;            groupedRecords[dateStr].checkInTime = timeStr;&#10;        } else if (record.action === 'check-out') {&#10;            groupedRecords[dateStr].checkOutTime = timeStr;&#10;        }&#10;    }&#10;&#10;    return Object.values(groupedRecords).sort((a, b) =&gt;&#10;        new Date(b.date).getTime() - new Date(a.date).getTime()&#10;    );&#10;}&#10;&#10;export async function updateUserAttendanceRecords(&#10;    userId: string,&#10;    records: AttendanceRecord[]&#10;): Promise&lt;void&gt; {&#10;    // First, delete all existing attendance records for this user&#10;    await db.delete(attendance).where(eq(attendance.userId, userId));&#10;&#10;    // Then insert the new records&#10;    const attendanceEntries = [];&#10;&#10;    for (const record of records) {&#10;        // Create check-in entry if time exists&#10;        if (record.checkInTime) {&#10;            const checkInDateTime = new Date(`${record.date}T${record.checkInTime}:00`);&#10;            attendanceEntries.push({&#10;                userId: userId,&#10;                action: 'check-in',&#10;                timestamp: checkInDateTime,&#10;                status: 'present'&#10;            });&#10;        }&#10;&#10;        // Create check-out entry if time exists&#10;        if (record.checkOutTime) {&#10;            const checkOutDateTime = new Date(`${record.date}T${record.checkOutTime}:00`);&#10;            attendanceEntries.push({&#10;                userId: userId,&#10;                action: 'check-out',&#10;                timestamp: checkOutDateTime,&#10;                status: 'present'&#10;            });&#10;        }&#10;    }&#10;&#10;    if (attendanceEntries.length &gt; 0) {&#10;        await db.insert(attendance).values(attendanceEntries);&#10;    }&#10;}&#10;&#10;export async function getUserInfo(userId: string) {&#10;    const userInfo = await db&#10;        .select({&#10;            id: user.id,&#10;            name: user.name,&#10;            email: user.email&#10;        })&#10;        .from(user)&#10;        .where(eq(user.id, userId))&#10;        .limit(1);&#10;&#10;    if (userInfo.length === 0) {&#10;        throw new Error(&quot;User not found&quot;);&#10;    }&#10;&#10;    return userInfo[0];&#10;}&#10;&#10;export async function deleteAttendanceRecord(userId: string, recordId: number): Promise&lt;void&gt; {&#10;    await db&#10;        .delete(attendance)&#10;        .where(&#10;            and(&#10;                eq(attendance.userId, userId),&#10;                eq(attendance.id, recordId)&#10;            )&#10;        );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/user/[userId]/_components/attendance-edit-wrapper.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/user/[userId]/_components/attendance-edit-wrapper.tsx" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { AttendanceEdit } from './attendance-edit'&#10;import { updateUserAttendanceRecords, AttendanceRecord } from '../_actions/server-actions'&#10;&#10;interface AttendanceEditWrapperProps {&#10;    userId: string&#10;    userName: string&#10;    initialAttendanceRecords: AttendanceRecord[]&#10;}&#10;&#10;export function AttendanceEditWrapper({ userId, userName, initialAttendanceRecords }: AttendanceEditWrapperProps) {&#10;    const [attendanceRecords, setAttendanceRecords] = useState(initialAttendanceRecords)&#10;&#10;    const handleSaveAttendance = async (records: AttendanceRecord[]) =&gt; {&#10;        await updateUserAttendanceRecords(userId, records)&#10;        setAttendanceRecords(records)&#10;        // You could add a toast notification here for success feedback&#10;    }&#10;&#10;    return (&#10;        &lt;AttendanceEdit&#10;            userId={userId}&#10;            userName={userName}&#10;            attendanceRecords={attendanceRecords}&#10;            onSave={handleSaveAttendance}&#10;        /&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/user/[userId]/_components/attendance-edit.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/user/[userId]/_components/attendance-edit.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;import { Label } from &quot;@/components/ui/label&quot;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import { Calendar, Clock, Plus, Trash2 } from 'lucide-react'&#10;import { formatDate, formatTime } from '@/app/admin/dashboard/_components/user-detail/utils'&#10;import { AttendanceRecord } from '../_actions/server-actions'&#10;&#10;interface AttendanceEditProps {&#10;    userId: string&#10;    userName: string&#10;    attendanceRecords: AttendanceRecord[]&#10;    onSave: (records: AttendanceRecord[]) =&gt; Promise&lt;void&gt;&#10;}&#10;&#10;export function AttendanceEdit({ userId, userName, attendanceRecords: initialRecords, onSave }: AttendanceEditProps) {&#10;    const [records, setRecords] = useState&lt;AttendanceRecord[]&gt;(initialRecords)&#10;    const [loading, setLoading] = useState(false)&#10;    const [editingRecord, setEditingRecord] = useState&lt;number | null&gt;(null)&#10;&#10;    const addNewRecord = () =&gt; {&#10;        const today = new Date().toISOString().split('T')[0]&#10;        const newRecord: AttendanceRecord = {&#10;            date: today,&#10;            checkInTime: '09:00',&#10;            checkOutTime: '17:00',&#10;            action: 'check-in',&#10;            timestamp: new Date()&#10;        }&#10;        setRecords([newRecord, ...records])&#10;        setEditingRecord(0)&#10;    }&#10;&#10;    const updateRecord = (index: number, field: keyof AttendanceRecord, value: any) =&gt; {&#10;        const updatedRecords = [...records]&#10;        updatedRecords[index] = { ...updatedRecords[index], [field]: value }&#10;        setRecords(updatedRecords)&#10;    }&#10;&#10;    const deleteRecord = (index: number) =&gt; {&#10;        const updatedRecords = records.filter((_, i) =&gt; i !== index)&#10;        setRecords(updatedRecords)&#10;        if (editingRecord === index) {&#10;            setEditingRecord(null)&#10;        }&#10;    }&#10;&#10;    const handleSave = async () =&gt; {&#10;        setLoading(true)&#10;        try {&#10;            await onSave(records)&#10;            setEditingRecord(null)&#10;        } catch (error) {&#10;            console.error('Failed to save attendance records:', error)&#10;        } finally {&#10;            setLoading(false)&#10;        }&#10;    }&#10;&#10;    const getStatusBadge = (checkInTime: string | null, checkOutTime: string | null) =&gt; {&#10;        if (checkInTime &amp;&amp; checkOutTime) {&#10;            return &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800 border-green-200&quot;&gt;Complete&lt;/Badge&gt;&#10;        } else if (checkInTime &amp;&amp; !checkOutTime) {&#10;            return &lt;Badge variant=&quot;outline&quot; className=&quot;bg-yellow-100 text-yellow-800 border-yellow-200&quot;&gt;In Progress&lt;/Badge&gt;&#10;        } else {&#10;            return &lt;Badge variant=&quot;destructive&quot; className=&quot;bg-red-100 text-red-800 border-red-200&quot;&gt;Absent&lt;/Badge&gt;&#10;        }&#10;    }&#10;&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;CardTitle className=&quot;text-xl&quot;&gt;Edit Attendance&lt;/CardTitle&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Managing attendance for {userName}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button&#10;                        onClick={addNewRecord}&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        className=&quot;text-blue-600 hover:text-blue-700&quot;&#10;                    &gt;&#10;                        &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        Add Record&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                {records.length === 0 ? (&#10;                    &lt;div className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                        &lt;Calendar className=&quot;w-12 h-12 mx-auto mb-4 text-gray-300&quot; /&gt;&#10;                        &lt;p&gt;No attendance records found&lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm&quot;&gt;Click &quot;Add Record&quot; to create a new entry&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    records.map((record, index) =&gt; (&#10;                        &lt;div key={index} className=&quot;border rounded-lg p-4 space-y-3&quot;&gt;&#10;                            {editingRecord === index ? (&#10;                                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;Label htmlFor={`date-${index}`}&gt;Date&lt;/Label&gt;&#10;                                            &lt;Input&#10;                                                id={`date-${index}`}&#10;                                                type=&quot;date&quot;&#10;                                                value={record.date}&#10;                                                onChange={(e) =&gt; updateRecord(index, 'date', e.target.value)}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;Label htmlFor={`checkin-${index}`}&gt;Check In Time&lt;/Label&gt;&#10;                                            &lt;Input&#10;                                                id={`checkin-${index}`}&#10;                                                type=&quot;time&quot;&#10;                                                value={record.checkInTime || ''}&#10;                                                onChange={(e) =&gt; updateRecord(index, 'checkInTime', e.target.value || null)}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;Label htmlFor={`checkout-${index}`}&gt;Check Out Time&lt;/Label&gt;&#10;                                            &lt;Input&#10;                                                id={`checkout-${index}`}&#10;                                                type=&quot;time&quot;&#10;                                                value={record.checkOutTime || ''}&#10;                                                onChange={(e) =&gt; updateRecord(index, 'checkOutTime', e.target.value || null)}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                                        &lt;Button&#10;                                            variant=&quot;outline&quot;&#10;                                            size=&quot;sm&quot;&#10;                                            onClick={() =&gt; setEditingRecord(null)}&#10;                                        &gt;&#10;                                            Cancel&#10;                                        &lt;/Button&gt;&#10;                                        &lt;Button&#10;                                            variant=&quot;destructive&quot;&#10;                                            size=&quot;sm&quot;&#10;                                            onClick={() =&gt; deleteRecord(index)}&#10;                                        &gt;&#10;                                            &lt;Trash2 className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;                                            Delete&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div&#10;                                    className=&quot;cursor-pointer hover:bg-gray-50 p-2 rounded transition-colors&quot;&#10;                                    onClick={() =&gt; setEditingRecord(index)}&#10;                                &gt;&#10;                                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                            &lt;Calendar className=&quot;w-4 h-4 text-gray-500&quot; /&gt;&#10;                                            &lt;span className=&quot;font-medium text-gray-900&quot;&gt;&#10;                                                {formatDate(record.date)}&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                        {getStatusBadge(record.checkInTime, record.checkOutTime)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;grid grid-cols-2 gap-4 ml-6&quot;&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check In&lt;/p&gt;&#10;                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                &lt;Clock className=&quot;w-3 h-3 text-gray-400&quot; /&gt;&#10;                                                &lt;span className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                                                    {record.checkInTime || '--:--'}&#10;                                                &lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check Out&lt;/p&gt;&#10;                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                &lt;Clock className=&quot;w-3 h-3 text-gray-400&quot; /&gt;&#10;                                                &lt;span className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                                                    {record.checkOutTime || '--:--'}&#10;                                                &lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;p className=&quot;text-xs text-gray-400 mt-2&quot;&gt;Click to edit&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    ))&#10;                )}&#10;&#10;                {records.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-end pt-4 border-t&quot;&gt;&#10;                        &lt;Button&#10;                            onClick={handleSave}&#10;                            disabled={loading}&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 text-white&quot;&#10;                        &gt;&#10;                            {loading ? 'Saving...' : 'Save Changes'}&#10;                        &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import { useState } from 'react'&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;&#10;import { Input } from &quot;@/components/ui/input&quot;&#10;import { Label } from &quot;@/components/ui/label&quot;&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from &quot;@/components/ui/select&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import { Calendar, Clock, Plus, Trash2 } from 'lucide-react'&#10;import { formatDate, formatTime } from '@/app/admin/dashboard/_components/user-detail/utils'&#10;import { AttendanceRecord } from '../_actions/server-actions'&#10;&#10;interface AttendanceEditProps {&#10;    userId: string&#10;    userName: string&#10;    attendanceRecords: AttendanceRecord[]&#10;    onSave: (records: AttendanceRecord[]) =&gt; Promise&lt;void&gt;&#10;}&#10;&#10;export function AttendanceEdit({ userId, userName, attendanceRecords: initialRecords, onSave }: AttendanceEditProps) {&#10;    const [records, setRecords] = useState&lt;AttendanceRecord[]&gt;(initialRecords)&#10;    const [loading, setLoading] = useState(false)&#10;    const [editingRecord, setEditingRecord] = useState&lt;number | null&gt;(null)&#10;&#10;    const addNewRecord = () =&gt; {&#10;        const today = new Date().toISOString().split('T')[0]&#10;        const newRecord: AttendanceRecord = {&#10;            date: today,&#10;            checkInTime: '09:00',&#10;            checkOutTime: '17:00',&#10;            action: 'check-in',&#10;            timestamp: new Date()&#10;        }&#10;        setRecords([newRecord, ...records])&#10;        setEditingRecord(0)&#10;    }&#10;&#10;    const updateRecord = (index: number, field: keyof AttendanceRecord, value: any) =&gt; {&#10;        const updatedRecords = [...records]&#10;        updatedRecords[index] = { ...updatedRecords[index], [field]: value }&#10;        setRecords(updatedRecords)&#10;    }&#10;&#10;    const deleteRecord = (index: number) =&gt; {&#10;        const updatedRecords = records.filter((_, i) =&gt; i !== index)&#10;        setRecords(updatedRecords)&#10;        if (editingRecord === index) {&#10;            setEditingRecord(null)&#10;        }&#10;    }&#10;&#10;    const handleSave = async () =&gt; {&#10;        setLoading(true)&#10;        try {&#10;            await onSave(records)&#10;            setEditingRecord(null)&#10;        } catch (error) {&#10;            console.error('Failed to save attendance records:', error)&#10;        } finally {&#10;            setLoading(false)&#10;        }&#10;    }&#10;&#10;    const getStatusBadge = (checkInTime: string | null, checkOutTime: string | null) =&gt; {&#10;        if (checkInTime &amp;&amp; checkOutTime) {&#10;            return &lt;Badge variant=&quot;default&quot; className=&quot;bg-green-100 text-green-800 border-green-200&quot;&gt;Complete&lt;/Badge&gt;&#10;        } else if (checkInTime &amp;&amp; !checkOutTime) {&#10;            return &lt;Badge variant=&quot;outline&quot; className=&quot;bg-yellow-100 text-yellow-800 border-yellow-200&quot;&gt;In Progress&lt;/Badge&gt;&#10;        } else {&#10;            return &lt;Badge variant=&quot;destructive&quot; className=&quot;bg-red-100 text-red-800 border-red-200&quot;&gt;Absent&lt;/Badge&gt;&#10;        }&#10;    }&#10;&#10;    return (&#10;        &lt;Card&gt;&#10;            &lt;CardHeader&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;div&gt;&#10;                        &lt;CardTitle className=&quot;text-xl&quot;&gt;Edit Attendance&lt;/CardTitle&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Managing attendance for {userName}&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;Button&#10;                        onClick={addNewRecord}&#10;                        variant=&quot;outline&quot;&#10;                        size=&quot;sm&quot;&#10;                        className=&quot;text-blue-600 hover:text-blue-700&quot;&#10;                    &gt;&#10;                        &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        Add Record&#10;                    &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent className=&quot;space-y-4&quot;&gt;&#10;                {records.length === 0 ? (&#10;                    &lt;div className=&quot;text-center py-8 text-gray-500&quot;&gt;&#10;                        &lt;Calendar className=&quot;w-12 h-12 mx-auto mb-4 text-gray-300&quot; /&gt;&#10;                        &lt;p&gt;No attendance records found&lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm&quot;&gt;Click &quot;Add Record&quot; to create a new entry&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                ) : (&#10;                    records.map((record, index) =&gt; (&#10;                        &lt;div key={index} className=&quot;border rounded-lg p-4 space-y-3&quot;&gt;&#10;                            {editingRecord === index ? (&#10;                                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                                    &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-4&quot;&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;Label htmlFor={`date-${index}`}&gt;Date&lt;/Label&gt;&#10;                                            &lt;Input&#10;                                                id={`date-${index}`}&#10;                                                type=&quot;date&quot;&#10;                                                value={record.date}&#10;                                                onChange={(e) =&gt; updateRecord(index, 'date', e.target.value)}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;Label htmlFor={`checkin-${index}`}&gt;Check In Time&lt;/Label&gt;&#10;                                            &lt;Input&#10;                                                id={`checkin-${index}`}&#10;                                                type=&quot;time&quot;&#10;                                                value={record.checkInTime || ''}&#10;                                                onChange={(e) =&gt; updateRecord(index, 'checkInTime', e.target.value || null)}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;Label htmlFor={`checkout-${index}`}&gt;Check Out Time&lt;/Label&gt;&#10;                                            &lt;Input&#10;                                                id={`checkout-${index}`}&#10;                                                type=&quot;time&quot;&#10;                                                value={record.checkOutTime || ''}&#10;                                                onChange={(e) =&gt; updateRecord(index, 'checkOutTime', e.target.value || null)}&#10;                                            /&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;flex justify-end space-x-2&quot;&gt;&#10;                                        &lt;Button&#10;                                            variant=&quot;outline&quot;&#10;                                            size=&quot;sm&quot;&#10;                                            onClick={() =&gt; setEditingRecord(null)}&#10;                                        &gt;&#10;                                            Cancel&#10;                                        &lt;/Button&gt;&#10;                                        &lt;Button&#10;                                            variant=&quot;destructive&quot;&#10;                                            size=&quot;sm&quot;&#10;                                            onClick={() =&gt; deleteRecord(index)}&#10;                                        &gt;&#10;                                            &lt;Trash2 className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;                                            Delete&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            ) : (&#10;                                &lt;div&#10;                                    className=&quot;cursor-pointer hover:bg-gray-50 p-2 rounded transition-colors&quot;&#10;                                    onClick={() =&gt; setEditingRecord(index)}&#10;                                &gt;&#10;                                    &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                            &lt;Calendar className=&quot;w-4 h-4 text-gray-500&quot; /&gt;&#10;                                            &lt;span className=&quot;font-medium text-gray-900&quot;&gt;&#10;                                                {formatDate(record.date)}&#10;                                            &lt;/span&gt;&#10;                                        &lt;/div&gt;&#10;                                        {getStatusBadge(record.checkInTime, record.checkOutTime)}&#10;                                    &lt;/div&gt;&#10;                                    &lt;div className=&quot;grid grid-cols-2 gap-4 ml-6&quot;&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check In&lt;/p&gt;&#10;                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                &lt;Clock className=&quot;w-3 h-3 text-gray-400&quot; /&gt;&#10;                                                &lt;span className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                                                    {record.checkInTime || '--:--'}&#10;                                                &lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                        &lt;div&gt;&#10;                                            &lt;p className=&quot;text-xs text-gray-500 uppercase tracking-wide&quot;&gt;Check Out&lt;/p&gt;&#10;                                            &lt;div className=&quot;flex items-center gap-1&quot;&gt;&#10;                                                &lt;Clock className=&quot;w-3 h-3 text-gray-400&quot; /&gt;&#10;                                                &lt;span className=&quot;font-mono text-sm font-medium text-gray-900&quot;&gt;&#10;                                                    {record.checkOutTime || '--:--'}&#10;                                                &lt;/span&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    &lt;p className=&quot;text-xs text-gray-400 mt-2&quot;&gt;Click to edit&lt;/p&gt;&#10;                                &lt;/div&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    ))&#10;                )}&#10;&#10;                {records.length &gt; 0 &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-end pt-4 border-t&quot;&gt;&#10;                        &lt;Button&#10;                            onClick={handleSave}&#10;                            disabled={loading}&#10;                            className=&quot;bg-blue-600 hover:bg-blue-700 text-white&quot;&#10;                        &gt;&#10;                            {loading ? 'Saving...' : 'Save Changes'}&#10;                        &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/admin/user/[userId]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/admin/user/[userId]/page.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import {auth} from &quot;@/lib/auth&quot;;&#10;import {headers} from &quot;next/headers&quot;;&#10;import {redirect} from &quot;next/navigation&quot;;&#10;import {AdminHeader} from &quot;@/app/admin/dashboard/_components/admin-header&quot;;&#10;import {AttendanceEdit} from &quot;@/app/admin/user/[userId]/_components/attendance-edit&quot;;&#10;&#10;async function UserPage({ params }: { params: { userId: string } }) {&#10;    const session = await auth.api.getSession({&#10;        headers: await headers()&#10;    });&#10;&#10;    if (!session || !session.user || session.user.role !== 'admin') {&#10;        redirect('/');&#10;    }&#10;&#10;    const selectedUserId = params.userId;&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4&quot;&gt;&#10;            &lt;div className=&quot;max-w-md mx-auto space-y-6&quot;&gt;&#10;                &lt;AdminHeader&#10;                    userName={session.user.name}&#10;                    backUrl=&quot;/admin/dashboard&quot;&#10;                /&gt;&#10;&#10;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;&#10;export default UserPage;" />
              <option name="updatedContent" value="import React from 'react';&#10;import {auth} from &quot;@/lib/auth&quot;;&#10;import {headers} from &quot;next/headers&quot;;&#10;import {redirect} from &quot;next/navigation&quot;;&#10;import {AdminHeader} from &quot;@/app/admin/dashboard/_components/admin-header&quot;;&#10;import {AttendanceEditWrapper} from &quot;@/app/admin/user/[userId]/_components/attendance-edit-wrapper&quot;;&#10;import {getUserAttendanceRecords, getUserInfo} from &quot;./_actions/server-actions&quot;;&#10;&#10;async function UserPage({ params }: { params: { userId: string } }) {&#10;    const session = await auth.api.getSession({&#10;        headers: await headers()&#10;    });&#10;&#10;    if (!session || !session.user || session.user.role !== 'admin') {&#10;        redirect('/');&#10;    }&#10;&#10;    const selectedUserId = params.userId;&#10;&#10;    // Fetch user info and attendance records&#10;    const [userInfo, attendanceRecords] = await Promise.all([&#10;        getUserInfo(selectedUserId),&#10;        getUserAttendanceRecords(selectedUserId)&#10;    ]);&#10;&#10;    return (&#10;        &lt;div className=&quot;min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4&quot;&gt;&#10;            &lt;div className=&quot;max-w-4xl mx-auto space-y-6&quot;&gt;&#10;                &lt;AdminHeader&#10;                    userName={session.user.name}&#10;                    backUrl=&quot;/admin/dashboard&quot;&#10;                /&gt;&#10;                &#10;                &lt;AttendanceEditWrapper&#10;                    userId={selectedUserId}&#10;                    userName={userInfo.name}&#10;                    initialAttendanceRecords={attendanceRecords}&#10;                /&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    );&#10;}&#10;&#10;&#10;export default UserPage;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/api/cron/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/api/cron/route.ts" />
              <option name="originalContent" value="import {attendance, db, shop_days, user} from &quot;@/index&quot;;&#10;import { and, eq, not, exists, gte, lte } from 'drizzle-orm';&#10;import { DateTime } from 'luxon';&#10;&#10;const SECURITY_KEY = process.env.CRON_SECURITY_KEY || 'default_secret_key';&#10;&#10;export async function POST(request: Request) {&#10;    const headerKey = request.headers.get('x-cron-key');&#10;&#10;    if (headerKey !== SECURITY_KEY) {&#10;        console.log(&quot;[Cron] Unauthorized access attempt&quot;);&#10;        return new Response(&quot;Unauthorized&quot;, { status: 401 });&#10;    }&#10;&#10;    console.log(&quot;[Cron] Job started&quot;);&#10;&#10;    const estNow = DateTime.now().setZone('America/New_York');&#10;&#10;    const todayStart = estNow.startOf('day').toUTC().toJSDate();&#10;    const todayEnd = estNow.endOf('day').toUTC().toJSDate();&#10;&#10;    const checkoutTime = estNow&#10;        .set({ hour: 17, minute: 0, second: 0, millisecond: 0 }) // 5:00 PM EST&#10;        .toUTC()                                                  // convert to UTC&#10;        .toJSDate();                                              // convert to JS Date object&#10;&#10;    if (await isShopDay(new Date())) {&#10;        console.log(&quot;[Cron] Today is a shop day&quot;);&#10;&#10;        const users = await db.select().from(user).execute();&#10;        console.log(`[Cron] Found ${users.length} users`);&#10;&#10;        for (const u of users) {&#10;            const checkedIn = await db&#10;                .select()&#10;                .from(attendance)&#10;                .where(&#10;                    and(&#10;                        eq(attendance.userId, u.id),&#10;                        eq(attendance.action, 'check-in'),&#10;                        gte(attendance.timestamp, todayStart),&#10;                        lte(attendance.timestamp, todayEnd)&#10;                    )&#10;                )&#10;                .execute();&#10;&#10;            if (checkedIn.length === 0) {&#10;                console.log(`[Cron] User ${u.id} did not check in. Marking absent.`);&#10;                await db.insert(attendance).values({&#10;                    userId: u.id,&#10;                    action: 'check-in',&#10;                    status: 'absent',&#10;                    timestamp: new Date(),&#10;                });&#10;&#10;                await db.insert(attendance).values({&#10;                    userId: u.id,&#10;                    action: 'check-out',&#10;                    status: 'absent',&#10;                    timestamp: new Date(),&#10;                });&#10;            }&#10;        }&#10;    } else {&#10;        console.log(&quot;[Cron] Today is not a shop day&quot;);&#10;    }&#10;&#10;    console.log(&quot;[Cron] Checking for users who checked in but not out&quot;);&#10;    const checkedInNotOutUsers = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(&#10;            and(&#10;                eq(attendance.action, 'check-in'),&#10;                gte(attendance.timestamp, todayStart),&#10;                lte(attendance.timestamp, todayEnd),&#10;                not(&#10;                    exists(&#10;                        db&#10;                            .select()&#10;                            .from(attendance)&#10;                            .where(&#10;                                and(&#10;                                    eq(attendance.action, 'check-out'),&#10;                                    eq(attendance.userId, attendance.userId),&#10;                                    gte(attendance.timestamp, todayStart),&#10;                                    lte(attendance.timestamp, todayEnd)&#10;                                )&#10;                            )&#10;                    )&#10;                )&#10;            )&#10;        )&#10;        .execute();&#10;&#10;    console.log(`[Cron] Found ${checkedInNotOutUsers.length} users to auto check-out`);&#10;&#10;    for (const record of checkedInNotOutUsers) {&#10;        console.log(`[Cron] Auto check-out for user ${record.userId}`);&#10;        await db.insert(attendance).values({&#10;            userId: record.userId,&#10;            action: 'check-out',&#10;            timestamp: checkoutTime&#10;        });&#10;    }&#10;&#10;    console.log(&quot;[Cron] Job finished&quot;);&#10;    return new Response(&quot;Cron job executed&quot;, { status: 200 });&#10;}&#10;&#10;async function isShopDay(date: Date): Promise&lt;boolean&gt; {&#10;    const day = date.getDay();&#10;    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];&#10;    const dayName = dayNames[day];&#10;&#10;    const shopDays = await db.select().from(shop_days).execute();&#10;&#10;    return shopDays.some(d =&gt; d.day.toLowerCase() === dayName);&#10;}" />
              <option name="updatedContent" value="import {attendance, db, shop_days, user} from &quot;@/index&quot;;&#10;import { and, eq, isNull, isNotNull } from 'drizzle-orm';&#10;import { DateTime } from 'luxon';&#10;&#10;const SECURITY_KEY = process.env.CRON_SECURITY_KEY || 'default_secret_key';&#10;&#10;export async function POST(request: Request) {&#10;    const headerKey = request.headers.get('x-cron-key');&#10;&#10;    if (headerKey !== SECURITY_KEY) {&#10;        console.log(&quot;[Cron] Unauthorized access attempt&quot;);&#10;        return new Response(&quot;Unauthorized&quot;, { status: 401 });&#10;    }&#10;&#10;    console.log(&quot;[Cron] Job started&quot;);&#10;&#10;    const estNow = DateTime.now().setZone('America/New_York');&#10;    const today = estNow.toFormat('yyyy-MM-dd'); // Format as YYYY-MM-DD string&#10;&#10;    const checkoutTime = estNow&#10;        .set({ hour: 17, minute: 0, second: 0, millisecond: 0 }) // 5:00 PM EST&#10;        .toUTC()                                                  // convert to UTC&#10;        .toJSDate();                                              // convert to JS Date object&#10;&#10;    if (await isShopDay(new Date())) {&#10;        console.log(&quot;[Cron] Today is a shop day&quot;);&#10;&#10;        const users = await db.select().from(user).execute();&#10;        console.log(`[Cron] Found ${users.length} users`);&#10;&#10;        for (const u of users) {&#10;            // Check if user has any attendance record for today&#10;            const todayAttendance = await db&#10;                .select()&#10;                .from(attendance)&#10;                .where(&#10;                    and(&#10;                        eq(attendance.userId, u.id),&#10;                        eq(attendance.date, today)&#10;                    )&#10;                )&#10;                .limit(1)&#10;                .execute();&#10;&#10;            if (todayAttendance.length === 0) {&#10;                // User has no attendance record for today - mark as absent&#10;                console.log(`[Cron] User ${u.id} did not check in. Marking absent.`);&#10;                await db.insert(attendance).values({&#10;                    userId: u.id,&#10;                    date: today,&#10;                    checkInTime: null,&#10;                    checkOutTime: null,&#10;                    status: 'absent',&#10;                });&#10;            }&#10;        }&#10;    } else {&#10;        console.log(&quot;[Cron] Today is not a shop day&quot;);&#10;    }&#10;&#10;    console.log(&quot;[Cron] Checking for users who checked in but not out&quot;);&#10;    &#10;    // Find users who have checked in today but haven't checked out&#10;    const checkedInNotOutUsers = await db&#10;        .select()&#10;        .from(attendance)&#10;        .where(&#10;            and(&#10;                eq(attendance.date, today),&#10;                isNotNull(attendance.checkInTime),  // Has checked in&#10;                isNull(attendance.checkOutTime)     // But hasn't checked out&#10;            )&#10;        )&#10;        .execute();&#10;&#10;    console.log(`[Cron] Found ${checkedInNotOutUsers.length} users to auto check-out`);&#10;&#10;    for (const record of checkedInNotOutUsers) {&#10;        console.log(`[Cron] Auto check-out for user ${record.userId}`);&#10;        &#10;        // Update the existing record to add check-out time&#10;        await db&#10;            .update(attendance)&#10;            .set({&#10;                checkOutTime: checkoutTime,&#10;                updatedAt: new Date(),&#10;            })&#10;            .where(eq(attendance.id, record.id));&#10;    }&#10;&#10;    console.log(&quot;[Cron] Job completed successfully&quot;);&#10;    return new Response(&quot;OK&quot;, { status: 200 });&#10;}&#10;&#10;async function isShopDay(date: Date): Promise&lt;boolean&gt; {&#10;    const dayName = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();&#10;    &#10;    const shopDay = await db&#10;        .select()&#10;        .from(shop_days)&#10;        .where(eq(shop_days.day, dayName))&#10;        .limit(1)&#10;        .execute();&#10;    &#10;    return shopDay.length &gt; 0;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/db/schema.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/db/schema.ts" />
              <option name="originalContent" value="import {&#10;    pgTable,&#10;    text,&#10;    timestamp,&#10;    boolean,&#10;    integer,&#10;} from &quot;drizzle-orm/pg-core&quot;;&#10;&#10;export const user = pgTable(&quot;user&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    name: text(&quot;name&quot;).notNull(),&#10;    email: text(&quot;email&quot;).notNull().unique(),&#10;    emailVerified: boolean(&quot;email_verified&quot;)&#10;        .$defaultFn(() =&gt; false)&#10;        .notNull(),&#10;    image: text(&quot;image&quot;),&#10;    createdAt: timestamp(&quot;created_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    role: text(&quot;role&quot;),&#10;    banned: boolean(&quot;banned&quot;),&#10;    banReason: text(&quot;ban_reason&quot;),&#10;    banExpires: timestamp(&quot;ban_expires&quot;),&#10;});&#10;&#10;export const session = pgTable(&quot;session&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    expiresAt: timestamp(&quot;expires_at&quot;).notNull(),&#10;    token: text(&quot;token&quot;).notNull().unique(),&#10;    createdAt: timestamp(&quot;created_at&quot;).notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;).notNull(),&#10;    ipAddress: text(&quot;ip_address&quot;),&#10;    userAgent: text(&quot;user_agent&quot;),&#10;    userId: text(&quot;user_id&quot;)&#10;        .notNull()&#10;        .references(() =&gt; user.id, { onDelete: &quot;cascade&quot; }),&#10;    impersonatedBy: text(&quot;impersonated_by&quot;),&#10;});&#10;&#10;export const account = pgTable(&quot;account&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    accountId: text(&quot;account_id&quot;).notNull(),&#10;    providerId: text(&quot;provider_id&quot;).notNull(),&#10;    userId: text(&quot;user_id&quot;)&#10;        .notNull()&#10;        .references(() =&gt; user.id, { onDelete: &quot;cascade&quot; }),&#10;    accessToken: text(&quot;access_token&quot;),&#10;    refreshToken: text(&quot;refresh_token&quot;),&#10;    idToken: text(&quot;id_token&quot;),&#10;    accessTokenExpiresAt: timestamp(&quot;access_token_expires_at&quot;),&#10;    refreshTokenExpiresAt: timestamp(&quot;refresh_token_expires_at&quot;),&#10;    scope: text(&quot;scope&quot;),&#10;    password: text(&quot;password&quot;),&#10;    createdAt: timestamp(&quot;created_at&quot;).notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;).notNull(),&#10;});&#10;&#10;export const verification = pgTable(&quot;verification&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    identifier: text(&quot;identifier&quot;).notNull(),&#10;    value: text(&quot;value&quot;).notNull(),&#10;    expiresAt: timestamp(&quot;expires_at&quot;).notNull(),&#10;    createdAt: timestamp(&quot;created_at&quot;).$defaultFn(&#10;        () =&gt; /* @__PURE__ */ new Date(),&#10;    ),&#10;    updatedAt: timestamp(&quot;updated_at&quot;).$defaultFn(&#10;        () =&gt; /* @__PURE__ */ new Date(),&#10;    ),&#10;});&#10;&#10;export const attendance = pgTable(&quot;attendance&quot;, {&#10;    id: integer(&quot;id&quot;).primaryKey().generatedByDefaultAsIdentity(),&#10;    userId: text(&quot;user_id&quot;)&#10;        .notNull()&#10;        .references(() =&gt; user.id, { onDelete: &quot;cascade&quot; }),&#10;    action: text(&quot;action&quot;).notNull(), // 'check-in' or 'check-out'&#10;    timestamp: timestamp(&quot;timestamp&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    status: text(&quot;status&quot;).notNull().default('present'), // 'present', 'absent'&#10;    createdAt: timestamp(&quot;created_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;});&#10;&#10;export const shop_days = pgTable(&quot;session_day&quot;, {&#10;    id: integer(&quot;id&quot;).primaryKey().generatedByDefaultAsIdentity(),&#10;    day: text(&quot;day&quot;).notNull(),&#10;    createdAt: timestamp(&quot;created_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;});" />
              <option name="updatedContent" value="import {&#10;    pgTable,&#10;    text,&#10;    timestamp,&#10;    boolean,&#10;    integer,&#10;} from &quot;drizzle-orm/pg-core&quot;;&#10;&#10;export const user = pgTable(&quot;user&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    name: text(&quot;name&quot;).notNull(),&#10;    email: text(&quot;email&quot;).notNull().unique(),&#10;    emailVerified: boolean(&quot;email_verified&quot;)&#10;        .$defaultFn(() =&gt; false)&#10;        .notNull(),&#10;    image: text(&quot;image&quot;),&#10;    createdAt: timestamp(&quot;created_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    role: text(&quot;role&quot;),&#10;    banned: boolean(&quot;banned&quot;),&#10;    banReason: text(&quot;ban_reason&quot;),&#10;    banExpires: timestamp(&quot;ban_expires&quot;),&#10;});&#10;&#10;export const session = pgTable(&quot;session&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    expiresAt: timestamp(&quot;expires_at&quot;).notNull(),&#10;    token: text(&quot;token&quot;).notNull().unique(),&#10;    createdAt: timestamp(&quot;created_at&quot;).notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;).notNull(),&#10;    ipAddress: text(&quot;ip_address&quot;),&#10;    userAgent: text(&quot;user_agent&quot;),&#10;    userId: text(&quot;user_id&quot;)&#10;        .notNull()&#10;        .references(() =&gt; user.id, { onDelete: &quot;cascade&quot; }),&#10;    impersonatedBy: text(&quot;impersonated_by&quot;),&#10;});&#10;&#10;export const account = pgTable(&quot;account&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    accountId: text(&quot;account_id&quot;).notNull(),&#10;    providerId: text(&quot;provider_id&quot;).notNull(),&#10;    userId: text(&quot;user_id&quot;)&#10;        .notNull()&#10;        .references(() =&gt; user.id, { onDelete: &quot;cascade&quot; }),&#10;    accessToken: text(&quot;access_token&quot;),&#10;    refreshToken: text(&quot;refresh_token&quot;),&#10;    idToken: text(&quot;id_token&quot;),&#10;    accessTokenExpiresAt: timestamp(&quot;access_token_expires_at&quot;),&#10;    refreshTokenExpiresAt: timestamp(&quot;refresh_token_expires_at&quot;),&#10;    scope: text(&quot;scope&quot;),&#10;    password: text(&quot;password&quot;),&#10;    createdAt: timestamp(&quot;created_at&quot;).notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;).notNull(),&#10;});&#10;&#10;export const verification = pgTable(&quot;verification&quot;, {&#10;    id: text(&quot;id&quot;).primaryKey(),&#10;    identifier: text(&quot;identifier&quot;).notNull(),&#10;    value: text(&quot;value&quot;).notNull(),&#10;    expiresAt: timestamp(&quot;expires_at&quot;).notNull(),&#10;    createdAt: timestamp(&quot;created_at&quot;).$defaultFn(&#10;        () =&gt; /* @__PURE__ */ new Date(),&#10;    ),&#10;    updatedAt: timestamp(&quot;updated_at&quot;).$defaultFn(&#10;        () =&gt; /* @__PURE__ */ new Date(),&#10;    ),&#10;});&#10;&#10;export const attendance = pgTable(&quot;attendance&quot;, {&#10;    id: integer(&quot;id&quot;).primaryKey().generatedByDefaultAsIdentity(),&#10;    userId: text(&quot;user_id&quot;)&#10;        .notNull()&#10;        .references(() =&gt; user.id, { onDelete: &quot;cascade&quot; }),&#10;    date: text(&quot;date&quot;).notNull(), // Store as YYYY-MM-DD string&#10;    checkInTime: timestamp(&quot;check_in_time&quot;), // Nullable - user might not have checked in yet&#10;    checkOutTime: timestamp(&quot;check_out_time&quot;), // Nullable - user might not have checked out yet&#10;    status: text(&quot;status&quot;).notNull().default('present'), // 'present', 'absent'&#10;    createdAt: timestamp(&quot;created_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;});&#10;&#10;export const shop_days = pgTable(&quot;session_day&quot;, {&#10;    id: integer(&quot;id&quot;).primaryKey().generatedByDefaultAsIdentity(),&#10;    day: text(&quot;day&quot;).notNull(),&#10;    createdAt: timestamp(&quot;created_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;    updatedAt: timestamp(&quot;updated_at&quot;)&#10;        .$defaultFn(() =&gt; /* @__PURE__ */ new Date())&#10;        .notNull(),&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>